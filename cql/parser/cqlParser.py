# Generated from cql.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00aa")
        buf.write("\u049d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00dc")
        buf.write("\n\2\3\3\5\3\u00df\n\3\3\3\7\3\u00e2\n\3\f\3\16\3\u00e5")
        buf.write("\13\3\3\3\7\3\u00e8\n\3\f\3\16\3\u00eb\13\3\3\3\3\3\3")
        buf.write("\4\3\4\3\4\3\4\5\4\u00f3\n\4\3\5\3\5\3\5\3\5\5\5\u00f9")
        buf.write("\n\5\3\6\3\6\3\6\3\6\5\6\u00ff\n\6\3\6\3\6\5\6\u0103\n")
        buf.write("\6\3\7\3\7\3\b\3\b\3\t\5\t\u010a\n\t\3\t\3\t\3\t\5\t\u010f")
        buf.write("\n\t\3\t\3\t\5\t\u0113\n\t\3\n\5\n\u0116\n\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\5\n\u011e\n\n\3\13\5\13\u0121\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\5\13\u0129\n\13\3\13\5\13\u012c")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\7\f\u0133\n\f\f\f\16\f\u0136")
        buf.write("\13\f\3\f\3\f\3\r\3\r\3\r\5\r\u013d\n\r\3\r\3\r\3\16\3")
        buf.write("\16\3\17\5\17\u0144\n\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\5\17\u014d\n\17\3\20\5\20\u0150\n\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\7\20\u0159\n\20\f\20\16\20\u015c")
        buf.write("\13\20\3\20\3\20\5\20\u0160\n\20\3\21\3\21\3\21\5\21\u0165")
        buf.write("\n\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\5\26\u0176\n\26\3\27\3\27\3")
        buf.write("\27\7\27\u017b\n\27\f\27\16\27\u017e\13\27\3\27\3\27\3")
        buf.write("\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\33\7\33\u0193\n\33\f\33\16")
        buf.write("\33\u0196\13\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u01a2\n\35\f\35\16\35\u01a5\13\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\5\36\u01ac\n\36\3\37\3\37\5\37\u01b0")
        buf.write("\n\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \5 \u01ba\n \3 \3")
        buf.write(" \3!\3!\5!\u01c0\n!\3!\5!\u01c3\n!\3!\3!\3!\3!\3!\3!\7")
        buf.write("!\u01cb\n!\f!\16!\u01ce\13!\5!\u01d0\n!\3!\3!\3!\5!\u01d5")
        buf.write("\n!\3!\3!\3!\5!\u01da\n!\3\"\3\"\3\"\3#\3#\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u01e7\n$\3%\3%\3%\3&\3&\3\'\3\'\5\'\u01f0\n")
        buf.write("\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3*\3*\5*\u0200")
        buf.write("\n*\3*\3*\3*\3*\3*\5*\u0207\n*\3*\5*\u020a\n*\3*\3*\3")
        buf.write("+\3+\3,\3,\3-\3-\3.\3.\5.\u0216\n.\3/\3/\3\60\3\60\5\60")
        buf.write("\u021c\n\60\3\60\7\60\u021f\n\60\f\60\16\60\u0222\13\60")
        buf.write("\3\60\5\60\u0225\n\60\3\60\3\60\5\60\u0229\n\60\3\60\5")
        buf.write("\60\u022c\n\60\3\61\5\61\u022f\n\61\3\61\3\61\3\61\7\61")
        buf.write("\u0234\n\61\f\61\16\61\u0237\13\61\3\62\3\62\3\62\3\62")
        buf.write("\7\62\u023d\n\62\f\62\16\62\u0240\13\62\3\63\3\63\3\63")
        buf.write("\3\63\3\64\3\64\3\64\3\65\3\65\5\65\u024b\n\65\3\65\3")
        buf.write("\65\3\66\3\66\5\66\u0251\n\66\3\66\3\66\5\66\u0255\n\66")
        buf.write("\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67")
        buf.write("\u0261\n\67\38\38\38\38\38\38\78\u0269\n8\f8\168\u026c")
        buf.write("\138\58\u026e\n8\39\39\3:\3:\5:\u0274\n:\3;\3;\3;\7;\u0279")
        buf.write("\n;\f;\16;\u027c\13;\3;\3;\3<\3<\3<\7<\u0283\n<\f<\16")
        buf.write("<\u0286\13<\3<\3<\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>")
        buf.write("\3>\7>\u0297\n>\f>\16>\u029a\13>\3?\3?\5?\u029e\n?\3@")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u02af\n")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u02bf\n")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u02ce\n@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u02e0")
        buf.write("\n@\3@\3@\3@\3@\3@\3@\5@\u02e8\n@\3@\3@\3@\3@\3@\7@\u02ef")
        buf.write("\n@\f@\16@\u02f2\13@\3A\3A\3B\3B\3B\3B\5B\u02fa\nB\3C")
        buf.write("\3C\3D\3D\3D\3D\3D\3D\3D\5D\u0305\nD\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\5D\u0336\nD\3D\6D\u0339\nD\rD\16D\u033a")
        buf.write("\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0348\nD\5D\u034a")
        buf.write("\nD\5D\u034c\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\7D\u035f\nD\fD\16D\u0362\13D\3E\3E\3E\3")
        buf.write("E\3E\3F\3F\3F\3G\3G\3H\3H\3I\3I\3J\3J\5J\u0374\nJ\3J\3")
        buf.write("J\3J\5J\u0379\nJ\3K\5K\u037c\nK\3K\3K\3K\5K\u0381\nK\5")
        buf.write("K\u0383\nK\3L\5L\u0386\nL\3L\3L\5L\u038a\nL\3L\3L\5L\u038e")
        buf.write("\nL\3L\5L\u0391\nL\3L\5L\u0394\nL\3L\3L\5L\u0398\nL\3")
        buf.write("L\5L\u039b\nL\3L\5L\u039e\nL\3L\5L\u03a1\nL\3L\3L\5L\u03a5")
        buf.write("\nL\3L\5L\u03a8\nL\3L\5L\u03ab\nL\3L\3L\5L\u03af\nL\3")
        buf.write("L\5L\u03b2\nL\3L\5L\u03b5\nL\3L\5L\u03b8\nL\3L\3L\3L\3")
        buf.write("L\5L\u03be\nL\3L\3L\5L\u03c2\nL\3L\5L\u03c5\nL\3L\3L\5")
        buf.write("L\u03c9\nL\3L\5L\u03cc\nL\3L\3L\5L\u03d0\nL\3L\3L\5L\u03d4")
        buf.write("\nL\5L\u03d6\nL\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\5M\u03e5\nM\3N\3N\5N\u03e9\nN\3O\3O\3O\5O\u03ee\nO\3")
        buf.write("O\3O\3P\3P\3P\3P\3P\5P\u03f7\nP\3Q\3Q\3Q\5Q\u03fc\nQ\3")
        buf.write("Q\3Q\3R\3R\3R\3R\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u040e")
        buf.write("\nS\3T\3T\3T\3T\3T\3T\3T\3U\5U\u0418\nU\3U\3U\3U\3U\3")
        buf.write("U\7U\u041f\nU\fU\16U\u0422\13U\5U\u0424\nU\3U\3U\3V\3")
        buf.write("V\3V\3V\3W\3W\3W\3W\3W\3W\7W\u0432\nW\fW\16W\u0435\13")
        buf.write("W\5W\u0437\nW\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\5Y\u0444")
        buf.write("\nY\5Y\u0446\nY\3Y\3Y\3Y\3Y\7Y\u044c\nY\fY\16Y\u044f\13")
        buf.write("Y\5Y\u0451\nY\3Y\3Y\3Z\3Z\3Z\3[\3[\3[\3[\3[\5[\u045d\n")
        buf.write("[\3\\\3\\\3\\\3\\\3\\\7\\\u0464\n\\\f\\\16\\\u0467\13")
        buf.write("\\\3\\\3\\\5\\\u046b\n\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3")
        buf.write("a\3b\3b\3c\3c\5c\u047b\nc\3d\3d\5d\u047f\nd\3e\3e\5e\u0483")
        buf.write("\ne\3f\3f\3g\3g\3g\5g\u048a\ng\3h\3h\3h\7h\u048f\nh\f")
        buf.write("h\16h\u0492\13h\3i\3i\5i\u0496\ni\3j\3j\3j\5j\u049b\n")
        buf.write("j\3j\2\5z~\u0086k\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\2&\3\2\b\t")
        buf.write("\3\2+-\3\2\61\62\3\2\67:\4\2\30\31HI\4\2,-JK\4\2++LL\3")
        buf.write("\2MN\3\2PS\3\2=?\4\2;;@@\3\2T[\3\2_f\3\2ij\3\2kl\3\2s")
        buf.write("t\4\2\62\62\177\177\3\2\u0080\u0081\3\2vy\4\2ijzz\3\2")
        buf.write("\u0084\u0085\3\2\u0086\u0087\3\2\u0088\u0089\3\2\u008b")
        buf.write("\u008c\3\2\u008e\u0090\3\2\u0093\u0094\3\2>?\4\2!!((\4")
        buf.write("\2\"\"**\21\2\3\f\16\17\24\27\32\33\35 %\'++.GLOQhktx")
        buf.write("y{\u0087\u008a\u0097\u009b\u009d\25\2\25\25\27\27\32\33")
        buf.write("%\'++..\60\63\65\65;GMMT[_hmmqt{\u0083\u008a\u008d\u0090")
        buf.write("\u0091\u0093\u0095\u009c\u009d\26\2\3\f\16\17\24\24\26")
        buf.write("\26\35 //\64\64\66:LLNOQS\\^klnpxy\u0084\u0087\u008e\u008f")
        buf.write("\u0092\u0092\u0096\u0097\u009b\u009b\r\2\4\4\24\24\26")
        buf.write("\26//\61\62<<BBLL\\^kl\u009b\u009d\22\2\3\f\16\17\24\27")
        buf.write("\32\33\35 %\'++.GLOQhktxy{\u0087\u008b\u008c\u008e\u0097")
        buf.write("\u009b\u009d\4\2\\]\u009c\u009d\4\2\u009f\u009f\u00a4")
        buf.write("\u00a5\2\u0502\2\u00db\3\2\2\2\4\u00de\3\2\2\2\6\u00ee")
        buf.write("\3\2\2\2\b\u00f4\3\2\2\2\n\u00fa\3\2\2\2\f\u0104\3\2\2")
        buf.write("\2\16\u0106\3\2\2\2\20\u0109\3\2\2\2\22\u0115\3\2\2\2")
        buf.write("\24\u0120\3\2\2\2\26\u012d\3\2\2\2\30\u013c\3\2\2\2\32")
        buf.write("\u0140\3\2\2\2\34\u0143\3\2\2\2\36\u014f\3\2\2\2 \u0164")
        buf.write("\3\2\2\2\"\u0168\3\2\2\2$\u016a\3\2\2\2&\u016c\3\2\2\2")
        buf.write("(\u016e\3\2\2\2*\u0175\3\2\2\2,\u017c\3\2\2\2.\u0181\3")
        buf.write("\2\2\2\60\u0183\3\2\2\2\62\u0188\3\2\2\2\64\u018d\3\2")
        buf.write("\2\2\66\u0199\3\2\2\28\u019c\3\2\2\2:\u01ab\3\2\2\2<\u01ad")
        buf.write("\3\2\2\2>\u01b5\3\2\2\2@\u01bd\3\2\2\2B\u01db\3\2\2\2")
        buf.write("D\u01de\3\2\2\2F\u01e6\3\2\2\2H\u01e8\3\2\2\2J\u01eb\3")
        buf.write("\2\2\2L\u01ef\3\2\2\2N\u01f1\3\2\2\2P\u01f6\3\2\2\2R\u01fb")
        buf.write("\3\2\2\2T\u020d\3\2\2\2V\u020f\3\2\2\2X\u0211\3\2\2\2")
        buf.write("Z\u0215\3\2\2\2\\\u0217\3\2\2\2^\u0219\3\2\2\2`\u022e")
        buf.write("\3\2\2\2b\u0238\3\2\2\2d\u0241\3\2\2\2f\u0245\3\2\2\2")
        buf.write("h\u0248\3\2\2\2j\u024e\3\2\2\2l\u0259\3\2\2\2n\u0262\3")
        buf.write("\2\2\2p\u026f\3\2\2\2r\u0271\3\2\2\2t\u027a\3\2\2\2v\u0284")
        buf.write("\3\2\2\2x\u0289\3\2\2\2z\u028b\3\2\2\2|\u029d\3\2\2\2")
        buf.write("~\u02be\3\2\2\2\u0080\u02f3\3\2\2\2\u0082\u02f9\3\2\2")
        buf.write("\2\u0084\u02fb\3\2\2\2\u0086\u034b\3\2\2\2\u0088\u0363")
        buf.write("\3\2\2\2\u008a\u0368\3\2\2\2\u008c\u036b\3\2\2\2\u008e")
        buf.write("\u036d\3\2\2\2\u0090\u036f\3\2\2\2\u0092\u0378\3\2\2\2")
        buf.write("\u0094\u0382\3\2\2\2\u0096\u03d5\3\2\2\2\u0098\u03e4\3")
        buf.write("\2\2\2\u009a\u03e8\3\2\2\2\u009c\u03ea\3\2\2\2\u009e\u03f6")
        buf.write("\3\2\2\2\u00a0\u03f8\3\2\2\2\u00a2\u03ff\3\2\2\2\u00a4")
        buf.write("\u040d\3\2\2\2\u00a6\u040f\3\2\2\2\u00a8\u0417\3\2\2\2")
        buf.write("\u00aa\u0427\3\2\2\2\u00ac\u042b\3\2\2\2\u00ae\u043a\3")
        buf.write("\2\2\2\u00b0\u0445\3\2\2\2\u00b2\u0454\3\2\2\2\u00b4\u0457")
        buf.write("\3\2\2\2\u00b6\u045e\3\2\2\2\u00b8\u046c\3\2\2\2\u00ba")
        buf.write("\u046e\3\2\2\2\u00bc\u0470\3\2\2\2\u00be\u0472\3\2\2\2")
        buf.write("\u00c0\u0474\3\2\2\2\u00c2\u0476\3\2\2\2\u00c4\u047a\3")
        buf.write("\2\2\2\u00c6\u047e\3\2\2\2\u00c8\u0482\3\2\2\2\u00ca\u0484")
        buf.write("\3\2\2\2\u00cc\u0486\3\2\2\2\u00ce\u048b\3\2\2\2\u00d0")
        buf.write("\u0493\3\2\2\2\u00d2\u049a\3\2\2\2\u00d4\u00dc\5\b\5\2")
        buf.write("\u00d5\u00dc\5\n\6\2\u00d6\u00dc\5\22\n\2\u00d7\u00dc")
        buf.write("\5\24\13\2\u00d8\u00dc\5\34\17\2\u00d9\u00dc\5\36\20\2")
        buf.write("\u00da\u00dc\5\20\t\2\u00db\u00d4\3\2\2\2\u00db\u00d5")
        buf.write("\3\2\2\2\u00db\u00d6\3\2\2\2\u00db\u00d7\3\2\2\2\u00db")
        buf.write("\u00d8\3\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00da\3\2\2\2")
        buf.write("\u00dc\3\3\2\2\2\u00dd\u00df\5\6\4\2\u00de\u00dd\3\2\2")
        buf.write("\2\u00de\u00df\3\2\2\2\u00df\u00e3\3\2\2\2\u00e0\u00e2")
        buf.write("\5\2\2\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5\3\2\2\2\u00e3")
        buf.write("\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e9\3\2\2\2")
        buf.write("\u00e5\u00e3\3\2\2\2\u00e6\u00e8\5:\36\2\u00e7\u00e6\3")
        buf.write("\2\2\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
        buf.write("\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec")
        buf.write("\u00ed\7\2\2\3\u00ed\5\3\2\2\2\u00ee\u00ef\7\3\2\2\u00ef")
        buf.write("\u00f2\5t;\2\u00f0\u00f1\7\4\2\2\u00f1\u00f3\5&\24\2\u00f2")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\7\3\2\2\2\u00f4")
        buf.write("\u00f5\7\5\2\2\u00f5\u00f8\5.\30\2\u00f6\u00f7\7\4\2\2")
        buf.write("\u00f7\u00f9\5&\24\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3")
        buf.write("\2\2\2\u00f9\t\3\2\2\2\u00fa\u00fb\7\6\2\2\u00fb\u00fe")
        buf.write("\5t;\2\u00fc\u00fd\7\4\2\2\u00fd\u00ff\5&\24\2\u00fe\u00fc")
        buf.write("\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0102\3\2\2\2\u0100")
        buf.write("\u0101\7\7\2\2\u0101\u0103\5\f\7\2\u0102\u0100\3\2\2\2")
        buf.write("\u0102\u0103\3\2\2\2\u0103\13\3\2\2\2\u0104\u0105\5\u00ca")
        buf.write("f\2\u0105\r\3\2\2\2\u0106\u0107\t\2\2\2\u0107\17\3\2\2")
        buf.write("\2\u0108\u010a\5\16\b\2\u0109\u0108\3\2\2\2\u0109\u010a")
        buf.write("\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010c\7\n\2\2\u010c")
        buf.write("\u010e\5\u00caf\2\u010d\u010f\5*\26\2\u010e\u010d\3\2")
        buf.write("\2\2\u010e\u010f\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u0111")
        buf.write("\7\13\2\2\u0111\u0113\5~@\2\u0112\u0110\3\2\2\2\u0112")
        buf.write("\u0113\3\2\2\2\u0113\21\3\2\2\2\u0114\u0116\5\16\b\2\u0115")
        buf.write("\u0114\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\3\2\2\2")
        buf.write("\u0117\u0118\7\f\2\2\u0118\u0119\5\u00caf\2\u0119\u011a")
        buf.write("\7\r\2\2\u011a\u011d\5\"\22\2\u011b\u011c\7\4\2\2\u011c")
        buf.write("\u011e\5&\24\2\u011d\u011b\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\23\3\2\2\2\u011f\u0121\5\16\b\2\u0120\u011f\3\2")
        buf.write("\2\2\u0120\u0121\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123")
        buf.write("\7\16\2\2\u0123\u0124\5\u00caf\2\u0124\u0125\7\r\2\2\u0125")
        buf.write("\u0128\5$\23\2\u0126\u0127\7\4\2\2\u0127\u0129\5&\24\2")
        buf.write("\u0128\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b\3")
        buf.write("\2\2\2\u012a\u012c\5\26\f\2\u012b\u012a\3\2\2\2\u012b")
        buf.write("\u012c\3\2\2\2\u012c\25\3\2\2\2\u012d\u012e\7\17\2\2\u012e")
        buf.write("\u012f\7\20\2\2\u012f\u0134\5\30\r\2\u0130\u0131\7\21")
        buf.write("\2\2\u0131\u0133\5\30\r\2\u0132\u0130\3\2\2\2\u0133\u0136")
        buf.write("\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135")
        buf.write("\u0137\3\2\2\2\u0136\u0134\3\2\2\2\u0137\u0138\7\22\2")
        buf.write("\2\u0138\27\3\2\2\2\u0139\u013a\5\32\16\2\u013a\u013b")
        buf.write("\7\23\2\2\u013b\u013d\3\2\2\2\u013c\u0139\3\2\2\2\u013c")
        buf.write("\u013d\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013f\5\u00ca")
        buf.write("f\2\u013f\31\3\2\2\2\u0140\u0141\5\u00caf\2\u0141\33\3")
        buf.write("\2\2\2\u0142\u0144\5\16\b\2\u0143\u0142\3\2\2\2\u0143")
        buf.write("\u0144\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\7\24\2")
        buf.write("\2\u0146\u0147\5\u00caf\2\u0147\u0148\7\r\2\2\u0148\u0149")
        buf.write("\5(\25\2\u0149\u014a\7\25\2\2\u014a\u014c\5\30\r\2\u014b")
        buf.write("\u014d\5\u00b2Z\2\u014c\u014b\3\2\2\2\u014c\u014d\3\2")
        buf.write("\2\2\u014d\35\3\2\2\2\u014e\u0150\5\16\b\2\u014f\u014e")
        buf.write("\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u0152\7\26\2\2\u0152\u0153\5\u00caf\2\u0153\u0154\7\r")
        buf.write("\2\2\u0154\u0155\7\20\2\2\u0155\u015a\5 \21\2\u0156\u0157")
        buf.write("\7\21\2\2\u0157\u0159\5 \21\2\u0158\u0156\3\2\2\2\u0159")
        buf.write("\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2")
        buf.write("\u015b\u015d\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u015f\7")
        buf.write("\22\2\2\u015e\u0160\5\u00b2Z\2\u015f\u015e\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\37\3\2\2\2\u0161\u0162\5\32\16\2")
        buf.write("\u0162\u0163\7\23\2\2\u0163\u0165\3\2\2\2\u0164\u0161")
        buf.write("\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0166\3\2\2\2\u0166")
        buf.write("\u0167\5\u00caf\2\u0167!\3\2\2\2\u0168\u0169\7\u00a6\2")
        buf.write("\2\u0169#\3\2\2\2\u016a\u016b\7\u00a6\2\2\u016b%\3\2\2")
        buf.write("\2\u016c\u016d\7\u00a6\2\2\u016d\'\3\2\2\2\u016e\u016f")
        buf.write("\7\u00a6\2\2\u016f)\3\2\2\2\u0170\u0176\5,\27\2\u0171")
        buf.write("\u0176\5\60\31\2\u0172\u0176\5\62\32\2\u0173\u0176\5\64")
        buf.write("\33\2\u0174\u0176\58\35\2\u0175\u0170\3\2\2\2\u0175\u0171")
        buf.write("\3\2\2\2\u0175\u0172\3\2\2\2\u0175\u0173\3\2\2\2\u0175")
        buf.write("\u0174\3\2\2\2\u0176+\3\2\2\2\u0177\u0178\5\\/\2\u0178")
        buf.write("\u0179\7\23\2\2\u0179\u017b\3\2\2\2\u017a\u0177\3\2\2")
        buf.write("\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2\u017c\u017d")
        buf.write("\3\2\2\2\u017d\u017f\3\2\2\2\u017e\u017c\3\2\2\2\u017f")
        buf.write("\u0180\5\u00c6d\2\u0180-\3\2\2\2\u0181\u0182\5\u00caf")
        buf.write("\2\u0182/\3\2\2\2\u0183\u0184\7\27\2\2\u0184\u0185\7\30")
        buf.write("\2\2\u0185\u0186\5*\26\2\u0186\u0187\7\31\2\2\u0187\61")
        buf.write("\3\2\2\2\u0188\u0189\7\32\2\2\u0189\u018a\7\30\2\2\u018a")
        buf.write("\u018b\5*\26\2\u018b\u018c\7\31\2\2\u018c\63\3\2\2\2\u018d")
        buf.write("\u018e\7\33\2\2\u018e\u018f\7\20\2\2\u018f\u0194\5\66")
        buf.write("\34\2\u0190\u0191\7\21\2\2\u0191\u0193\5\66\34\2\u0192")
        buf.write("\u0190\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2")
        buf.write("\u0194\u0195\3\2\2\2\u0195\u0197\3\2\2\2\u0196\u0194\3")
        buf.write("\2\2\2\u0197\u0198\7\22\2\2\u0198\65\3\2\2\2\u0199\u019a")
        buf.write("\5\u00c4c\2\u019a\u019b\5*\26\2\u019b\67\3\2\2\2\u019c")
        buf.write("\u019d\7\34\2\2\u019d\u019e\7\30\2\2\u019e\u01a3\5*\26")
        buf.write("\2\u019f\u01a0\7\21\2\2\u01a0\u01a2\5*\26\2\u01a1\u019f")
        buf.write("\3\2\2\2\u01a2\u01a5\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3")
        buf.write("\u01a4\3\2\2\2\u01a4\u01a6\3\2\2\2\u01a5\u01a3\3\2\2\2")
        buf.write("\u01a6\u01a7\7\31\2\2\u01a79\3\2\2\2\u01a8\u01ac\5<\37")
        buf.write("\2\u01a9\u01ac\5> \2\u01aa\u01ac\5@!\2\u01ab\u01a8\3\2")
        buf.write("\2\2\u01ab\u01a9\3\2\2\2\u01ab\u01aa\3\2\2\2\u01ac;\3")
        buf.write("\2\2\2\u01ad\u01af\7\35\2\2\u01ae\u01b0\5\16\b\2\u01af")
        buf.write("\u01ae\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2")
        buf.write("\u01b1\u01b2\5\u00caf\2\u01b2\u01b3\7\r\2\2\u01b3\u01b4")
        buf.write("\5~@\2\u01b4=\3\2\2\2\u01b5\u01b9\7\36\2\2\u01b6\u01b7")
        buf.write("\5.\30\2\u01b7\u01b8\7\23\2\2\u01b8\u01ba\3\2\2\2\u01b9")
        buf.write("\u01b6\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb\3\2\2\2")
        buf.write("\u01bb\u01bc\5\u00caf\2\u01bc?\3\2\2\2\u01bd\u01bf\7\35")
        buf.write("\2\2\u01be\u01c0\5\16\b\2\u01bf\u01be\3\2\2\2\u01bf\u01c0")
        buf.write("\3\2\2\2\u01c0\u01c2\3\2\2\2\u01c1\u01c3\7\37\2\2\u01c2")
        buf.write("\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\3\2\2\2")
        buf.write("\u01c4\u01c5\7 \2\2\u01c5\u01c6\5\u00c8e\2\u01c6\u01cf")
        buf.write("\7!\2\2\u01c7\u01cc\5B\"\2\u01c8\u01c9\7\21\2\2\u01c9")
        buf.write("\u01cb\5B\"\2\u01ca\u01c8\3\2\2\2\u01cb\u01ce\3\2\2\2")
        buf.write("\u01cc\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01d0\3")
        buf.write("\2\2\2\u01ce\u01cc\3\2\2\2\u01cf\u01c7\3\2\2\2\u01cf\u01d0")
        buf.write("\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d4\7\"\2\2\u01d2")
        buf.write("\u01d3\7#\2\2\u01d3\u01d5\5*\26\2\u01d4\u01d2\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d9\7")
        buf.write("\r\2\2\u01d7\u01da\5D#\2\u01d8\u01da\7$\2\2\u01d9\u01d7")
        buf.write("\3\2\2\2\u01d9\u01d8\3\2\2\2\u01daA\3\2\2\2\u01db\u01dc")
        buf.write("\5\u00c4c\2\u01dc\u01dd\5*\26\2\u01ddC\3\2\2\2\u01de\u01df")
        buf.write("\5~@\2\u01dfE\3\2\2\2\u01e0\u01e7\5R*\2\u01e1\u01e7\5")
        buf.write("v<\2\u01e2\u01e3\7!\2\2\u01e3\u01e4\5~@\2\u01e4\u01e5")
        buf.write("\7\"\2\2\u01e5\u01e7\3\2\2\2\u01e6\u01e0\3\2\2\2\u01e6")
        buf.write("\u01e1\3\2\2\2\u01e6\u01e2\3\2\2\2\u01e7G\3\2\2\2\u01e8")
        buf.write("\u01e9\5F$\2\u01e9\u01ea\5J&\2\u01eaI\3\2\2\2\u01eb\u01ec")
        buf.write("\5\u00caf\2\u01ecK\3\2\2\2\u01ed\u01f0\5N(\2\u01ee\u01f0")
        buf.write("\5P)\2\u01ef\u01ed\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0M")
        buf.write("\3\2\2\2\u01f1\u01f2\7%\2\2\u01f2\u01f3\5H%\2\u01f3\u01f4")
        buf.write("\7&\2\2\u01f4\u01f5\5~@\2\u01f5O\3\2\2\2\u01f6\u01f7\7")
        buf.write("\'\2\2\u01f7\u01f8\5H%\2\u01f8\u01f9\7&\2\2\u01f9\u01fa")
        buf.write("\5~@\2\u01faQ\3\2\2\2\u01fb\u01ff\7(\2\2\u01fc\u01fd\5")
        buf.write("T+\2\u01fd\u01fe\7)\2\2\u01fe\u0200\3\2\2\2\u01ff\u01fc")
        buf.write("\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u0209\5,\27\2\u0202\u0206\7\r\2\2\u0203\u0204\5V,\2\u0204")
        buf.write("\u0205\5X-\2\u0205\u0207\3\2\2\2\u0206\u0203\3\2\2\2\u0206")
        buf.write("\u0207\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u020a\5Z.\2\u0209")
        buf.write("\u0202\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b\3\2\2\2")
        buf.write("\u020b\u020c\7*\2\2\u020cS\3\2\2\2\u020d\u020e\5v<\2\u020e")
        buf.write("U\3\2\2\2\u020f\u0210\5z>\2\u0210W\3\2\2\2\u0211\u0212")
        buf.write("\t\3\2\2\u0212Y\3\2\2\2\u0213\u0216\5v<\2\u0214\u0216")
        buf.write("\5~@\2\u0215\u0213\3\2\2\2\u0215\u0214\3\2\2\2\u0216[")
        buf.write("\3\2\2\2\u0217\u0218\5\u00caf\2\u0218]\3\2\2\2\u0219\u021b")
        buf.write("\5`\61\2\u021a\u021c\5b\62\2\u021b\u021a\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c\u0220\3\2\2\2\u021d\u021f\5L\'\2")
        buf.write("\u021e\u021d\3\2\2\2\u021f\u0222\3\2\2\2\u0220\u021e\3")
        buf.write("\2\2\2\u0220\u0221\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220")
        buf.write("\3\2\2\2\u0223\u0225\5f\64\2\u0224\u0223\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0228\3\2\2\2\u0226\u0229\5j\66\2")
        buf.write("\u0227\u0229\5h\65\2\u0228\u0226\3\2\2\2\u0228\u0227\3")
        buf.write("\2\2\2\u0228\u0229\3\2\2\2\u0229\u022b\3\2\2\2\u022a\u022c")
        buf.write("\5n8\2\u022b\u022a\3\2\2\2\u022b\u022c\3\2\2\2\u022c_")
        buf.write("\3\2\2\2\u022d\u022f\7\25\2\2\u022e\u022d\3\2\2\2\u022e")
        buf.write("\u022f\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0235\5H%\2\u0231")
        buf.write("\u0232\7\21\2\2\u0232\u0234\5H%\2\u0233\u0231\3\2\2\2")
        buf.write("\u0234\u0237\3\2\2\2\u0235\u0233\3\2\2\2\u0235\u0236\3")
        buf.write("\2\2\2\u0236a\3\2\2\2\u0237\u0235\3\2\2\2\u0238\u0239")
        buf.write("\7.\2\2\u0239\u023e\5d\63\2\u023a\u023b\7\21\2\2\u023b")
        buf.write("\u023d\5d\63\2\u023c\u023a\3\2\2\2\u023d\u0240\3\2\2\2")
        buf.write("\u023e\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023fc\3\2\2")
        buf.write("\2\u0240\u023e\3\2\2\2\u0241\u0242\5\u00caf\2\u0242\u0243")
        buf.write("\7\r\2\2\u0243\u0244\5~@\2\u0244e\3\2\2\2\u0245\u0246")
        buf.write("\7/\2\2\u0246\u0247\5~@\2\u0247g\3\2\2\2\u0248\u024a\7")
        buf.write("\60\2\2\u0249\u024b\t\4\2\2\u024a\u0249\3\2\2\2\u024a")
        buf.write("\u024b\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\5~@\2\u024d")
        buf.write("i\3\2\2\2\u024e\u0250\7\63\2\2\u024f\u0251\t\4\2\2\u0250")
        buf.write("\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\3\2\2\2")
        buf.write("\u0252\u0254\5\u00caf\2\u0253\u0255\5l\67\2\u0254\u0253")
        buf.write("\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256")
        buf.write("\u0257\7\r\2\2\u0257\u0258\5~@\2\u0258k\3\2\2\2\u0259")
        buf.write("\u0260\7\64\2\2\u025a\u0261\5|?\2\u025b\u0261\5\u00d0")
        buf.write("i\2\u025c\u025d\7!\2\2\u025d\u025e\5~@\2\u025e\u025f\7")
        buf.write("\"\2\2\u025f\u0261\3\2\2\2\u0260\u025a\3\2\2\2\u0260\u025b")
        buf.write("\3\2\2\2\u0260\u025c\3\2\2\2\u0261m\3\2\2\2\u0262\u026d")
        buf.write("\7\65\2\2\u0263\u026e\5p9\2\u0264\u0265\7\66\2\2\u0265")
        buf.write("\u026a\5r:\2\u0266\u0267\7\21\2\2\u0267\u0269\5r:\2\u0268")
        buf.write("\u0266\3\2\2\2\u0269\u026c\3\2\2\2\u026a\u0268\3\2\2\2")
        buf.write("\u026a\u026b\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a\3")
        buf.write("\2\2\2\u026d\u0263\3\2\2\2\u026d\u0264\3\2\2\2\u026eo")
        buf.write("\3\2\2\2\u026f\u0270\t\5\2\2\u0270q\3\2\2\2\u0271\u0273")
        buf.write("\5\u0086D\2\u0272\u0274\5p9\2\u0273\u0272\3\2\2\2\u0273")
        buf.write("\u0274\3\2\2\2\u0274s\3\2\2\2\u0275\u0276\5\\/\2\u0276")
        buf.write("\u0277\7\23\2\2\u0277\u0279\3\2\2\2\u0278\u0275\3\2\2")
        buf.write("\2\u0279\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027b\u027d\3\2\2\2\u027c\u027a\3\2\2\2\u027d")
        buf.write("\u027e\5\u00caf\2\u027eu\3\2\2\2\u027f\u0280\5x=\2\u0280")
        buf.write("\u0281\7\23\2\2\u0281\u0283\3\2\2\2\u0282\u027f\3\2\2")
        buf.write("\2\u0283\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285")
        buf.write("\3\2\2\2\u0285\u0287\3\2\2\2\u0286\u0284\3\2\2\2\u0287")
        buf.write("\u0288\5\u00c4c\2\u0288w\3\2\2\2\u0289\u028a\5\u00c4c")
        buf.write("\2\u028ay\3\2\2\2\u028b\u028c\b>\1\2\u028c\u028d\5\u00c4")
        buf.write("c\2\u028d\u0298\3\2\2\2\u028e\u028f\f\4\2\2\u028f\u0290")
        buf.write("\7\23\2\2\u0290\u0297\5\u00c4c\2\u0291\u0292\f\3\2\2\u0292")
        buf.write("\u0293\7(\2\2\u0293\u0294\5|?\2\u0294\u0295\7*\2\2\u0295")
        buf.write("\u0297\3\2\2\2\u0296\u028e\3\2\2\2\u0296\u0291\3\2\2\2")
        buf.write("\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3")
        buf.write("\2\2\2\u0299{\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u029e")
        buf.write("\7\u00a6\2\2\u029c\u029e\7\u00a7\2\2\u029d\u029b\3\2\2")
        buf.write("\2\u029d\u029c\3\2\2\2\u029e}\3\2\2\2\u029f\u02a0\b@\1")
        buf.write("\2\u02a0\u02bf\5\u0086D\2\u02a1\u02bf\5R*\2\u02a2\u02bf")
        buf.write("\5^\60\2\u02a3\u02a4\7A\2\2\u02a4\u02a5\5~@\2\u02a5\u02a6")
        buf.write("\7@\2\2\u02a6\u02a7\5*\26\2\u02a7\u02bf\3\2\2\2\u02a8")
        buf.write("\u02a9\7<\2\2\u02a9\u02bf\5~@\17\u02aa\u02ab\7B\2\2\u02ab")
        buf.write("\u02bf\5~@\16\u02ac\u02ad\7F\2\2\u02ad\u02af\7+\2\2\u02ae")
        buf.write("\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0\3\2\2\2")
        buf.write("\u02b0\u02b1\5\u0084C\2\u02b1\u02b2\7D\2\2\u02b2\u02b3")
        buf.write("\5\u0086D\2\u02b3\u02b4\7E\2\2\u02b4\u02b5\5\u0086D\2")
        buf.write("\u02b5\u02bf\3\2\2\2\u02b6\u02b7\7G\2\2\u02b7\u02b8\7")
        buf.write("+\2\2\u02b8\u02b9\5\u0084C\2\u02b9\u02ba\7D\2\2\u02ba")
        buf.write("\u02bb\5\u0086D\2\u02bb\u02bc\7E\2\2\u02bc\u02bd\5\u0086")
        buf.write("D\2\u02bd\u02bf\3\2\2\2\u02be\u029f\3\2\2\2\u02be\u02a1")
        buf.write("\3\2\2\2\u02be\u02a2\3\2\2\2\u02be\u02a3\3\2\2\2\u02be")
        buf.write("\u02a8\3\2\2\2\u02be\u02aa\3\2\2\2\u02be\u02ae\3\2\2\2")
        buf.write("\u02be\u02b6\3\2\2\2\u02bf\u02f0\3\2\2\2\u02c0\u02c1\f")
        buf.write("\n\2\2\u02c1\u02c2\t\6\2\2\u02c2\u02ef\5~@\13\u02c3\u02c4")
        buf.write("\f\t\2\2\u02c4\u02c5\5\u0096L\2\u02c5\u02c6\5~@\n\u02c6")
        buf.write("\u02ef\3\2\2\2\u02c7\u02c8\f\b\2\2\u02c8\u02c9\t\7\2\2")
        buf.write("\u02c9\u02ef\5~@\t\u02ca\u02cb\f\7\2\2\u02cb\u02cd\t\b")
        buf.write("\2\2\u02cc\u02ce\5\u008aF\2\u02cd\u02cc\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02ef\5~@\b\u02d0")
        buf.write("\u02d1\f\6\2\2\u02d1\u02d2\7E\2\2\u02d2\u02ef\5~@\7\u02d3")
        buf.write("\u02d4\f\5\2\2\u02d4\u02d5\t\t\2\2\u02d5\u02ef\5~@\6\u02d6")
        buf.write("\u02d7\f\4\2\2\u02d7\u02d8\7O\2\2\u02d8\u02ef\5~@\5\u02d9")
        buf.write("\u02da\f\3\2\2\u02da\u02db\t\n\2\2\u02db\u02ef\5~@\4\u02dc")
        buf.write("\u02dd\f\22\2\2\u02dd\u02df\7;\2\2\u02de\u02e0\7<\2\2")
        buf.write("\u02df\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e1\3")
        buf.write("\2\2\2\u02e1\u02ef\t\13\2\2\u02e2\u02e3\f\21\2\2\u02e3")
        buf.write("\u02e4\t\f\2\2\u02e4\u02ef\5*\26\2\u02e5\u02e7\f\r\2\2")
        buf.write("\u02e6\u02e8\7C\2\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3")
        buf.write("\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\7D\2\2\u02ea\u02eb")
        buf.write("\5\u0086D\2\u02eb\u02ec\7E\2\2\u02ec\u02ed\5\u0086D\2")
        buf.write("\u02ed\u02ef\3\2\2\2\u02ee\u02c0\3\2\2\2\u02ee\u02c3\3")
        buf.write("\2\2\2\u02ee\u02c7\3\2\2\2\u02ee\u02ca\3\2\2\2\u02ee\u02d0")
        buf.write("\3\2\2\2\u02ee\u02d3\3\2\2\2\u02ee\u02d6\3\2\2\2\u02ee")
        buf.write("\u02d9\3\2\2\2\u02ee\u02dc\3\2\2\2\u02ee\u02e2\3\2\2\2")
        buf.write("\u02ee\u02e5\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3")
        buf.write("\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\177\3\2\2\2\u02f2\u02f0")
        buf.write("\3\2\2\2\u02f3\u02f4\t\r\2\2\u02f4\u0081\3\2\2\2\u02f5")
        buf.write("\u02fa\5\u0080A\2\u02f6\u02fa\7\\\2\2\u02f7\u02fa\7]\2")
        buf.write("\2\u02f8\u02fa\7^\2\2\u02f9\u02f5\3\2\2\2\u02f9\u02f6")
        buf.write("\3\2\2\2\u02f9\u02f7\3\2\2\2\u02f9\u02f8\3\2\2\2\u02fa")
        buf.write("\u0083\3\2\2\2\u02fb\u02fc\t\16\2\2\u02fc\u0085\3\2\2")
        buf.write("\2\u02fd\u02fe\bD\1\2\u02fe\u034c\5\u0098M\2\u02ff\u0300")
        buf.write("\7g\2\2\u0300\u0301\5~@\2\u0301\u0304\7h\2\2\u0302\u0305")
        buf.write("\5*\26\2\u0303\u0305\5\u00d2j\2\u0304\u0302\3\2\2\2\u0304")
        buf.write("\u0303\3\2\2\2\u0305\u034c\3\2\2\2\u0306\u0307\t\17\2")
        buf.write("\2\u0307\u034c\5\u0086D\24\u0308\u0309\t\20\2\2\u0309")
        buf.write("\u030a\7m\2\2\u030a\u034c\5\u0086D\23\u030b\u030c\5\u0082")
        buf.write("B\2\u030c\u030d\7\25\2\2\u030d\u030e\5\u0086D\22\u030e")
        buf.write("\u034c\3\2\2\2\u030f\u0310\7F\2\2\u0310\u0311\7+\2\2\u0311")
        buf.write("\u0312\5\u0084C\2\u0312\u0313\7m\2\2\u0313\u0314\5\u0086")
        buf.write("D\21\u0314\u034c\3\2\2\2\u0315\u0316\7G\2\2\u0316\u0317")
        buf.write("\7+\2\2\u0317\u0318\5\u0084C\2\u0318\u0319\7m\2\2\u0319")
        buf.write("\u031a\5\u0086D\20\u031a\u034c\3\2\2\2\u031b\u031c\7n")
        buf.write("\2\2\u031c\u031d\7m\2\2\u031d\u034c\5\u0086D\17\u031e")
        buf.write("\u031f\7o\2\2\u031f\u0320\7m\2\2\u0320\u034c\5\u0086D")
        buf.write("\16\u0321\u0322\7p\2\2\u0322\u0323\7m\2\2\u0323\u034c")
        buf.write("\5\u0086D\r\u0324\u0325\7q\2\2\u0325\u0326\7\25\2\2\u0326")
        buf.write("\u034c\5\u0086D\f\u0327\u0328\7r\2\2\u0328\u0329\7\25")
        buf.write("\2\2\u0329\u034c\5\u0086D\13\u032a\u032b\t\21\2\2\u032b")
        buf.write("\u034c\5,\27\2\u032c\u032d\7{\2\2\u032d\u032e\5~@\2\u032e")
        buf.write("\u032f\7|\2\2\u032f\u0330\5~@\2\u0330\u0331\7}\2\2\u0331")
        buf.write("\u0332\5~@\2\u0332\u034c\3\2\2\2\u0333\u0335\7~\2\2\u0334")
        buf.write("\u0336\5~@\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u0338\3\2\2\2\u0337\u0339\5\u0088E\2\u0338\u0337\3\2")
        buf.write("\2\2\u0339\u033a\3\2\2\2\u033a\u0338\3\2\2\2\u033a\u033b")
        buf.write("\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\7}\2\2\u033d")
        buf.write("\u033e\5~@\2\u033e\u033f\7l\2\2\u033f\u034c\3\2\2\2\u0340")
        buf.write("\u0341\t\22\2\2\u0341\u034c\5~@\2\u0342\u0343\t\23\2\2")
        buf.write("\u0343\u0349\5~@\2\u0344\u0347\7\u0082\2\2\u0345\u0348")
        buf.write("\5\u0080A\2\u0346\u0348\5~@\2\u0347\u0345\3\2\2\2\u0347")
        buf.write("\u0346\3\2\2\2\u0348\u034a\3\2\2\2\u0349\u0344\3\2\2\2")
        buf.write("\u0349\u034a\3\2\2\2\u034a\u034c\3\2\2\2\u034b\u02fd\3")
        buf.write("\2\2\2\u034b\u02ff\3\2\2\2\u034b\u0306\3\2\2\2\u034b\u0308")
        buf.write("\3\2\2\2\u034b\u030b\3\2\2\2\u034b\u030f\3\2\2\2\u034b")
        buf.write("\u0315\3\2\2\2\u034b\u031b\3\2\2\2\u034b\u031e\3\2\2\2")
        buf.write("\u034b\u0321\3\2\2\2\u034b\u0324\3\2\2\2\u034b\u0327\3")
        buf.write("\2\2\2\u034b\u032a\3\2\2\2\u034b\u032c\3\2\2\2\u034b\u0333")
        buf.write("\3\2\2\2\u034b\u0340\3\2\2\2\u034b\u0342\3\2\2\2\u034c")
        buf.write("\u0360\3\2\2\2\u034d\u034e\f\t\2\2\u034e\u034f\7u\2\2")
        buf.write("\u034f\u035f\5\u0086D\n\u0350\u0351\f\b\2\2\u0351\u0352")
        buf.write("\t\24\2\2\u0352\u035f\5\u0086D\t\u0353\u0354\f\7\2\2\u0354")
        buf.write("\u0355\t\25\2\2\u0355\u035f\5\u0086D\b\u0356\u0357\f\27")
        buf.write("\2\2\u0357\u0358\7\23\2\2\u0358\u035f\5\u009aN\2\u0359")
        buf.write("\u035a\f\26\2\2\u035a\u035b\7(\2\2\u035b\u035c\5~@\2\u035c")
        buf.write("\u035d\7*\2\2\u035d\u035f\3\2\2\2\u035e\u034d\3\2\2\2")
        buf.write("\u035e\u0350\3\2\2\2\u035e\u0353\3\2\2\2\u035e\u0356\3")
        buf.write("\2\2\2\u035e\u0359\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e")
        buf.write("\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0087\3\2\2\2\u0362")
        buf.write("\u0360\3\2\2\2\u0363\u0364\7\u0083\2\2\u0364\u0365\5~")
        buf.write("@\2\u0365\u0366\7|\2\2\u0366\u0367\5~@\2\u0367\u0089\3")
        buf.write("\2\2\2\u0368\u0369\5\u0080A\2\u0369\u036a\7m\2\2\u036a")
        buf.write("\u008b\3\2\2\2\u036b\u036c\t\26\2\2\u036c\u008d\3\2\2")
        buf.write("\2\u036d\u036e\t\27\2\2\u036e\u008f\3\2\2\2\u036f\u0370")
        buf.write("\t\30\2\2\u0370\u0091\3\2\2\2\u0371\u0373\5\u00d0i\2\u0372")
        buf.write("\u0374\5\u008eH\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2")
        buf.write("\2\2\u0374\u0379\3\2\2\2\u0375\u0376\5\u0090I\2\u0376")
        buf.write("\u0377\5\u00d0i\2\u0377\u0379\3\2\2\2\u0378\u0371\3\2")
        buf.write("\2\2\u0378\u0375\3\2\2\2\u0379\u0093\3\2\2\2\u037a\u037c")
        buf.write("\7\u008a\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u037d\3\2\2\2\u037d\u0383\t\31\2\2\u037e\u0380\t\31\2")
        buf.write("\2\u037f\u0381\7\u008d\2\2\u0380\u037f\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0383\3\2\2\2\u0382\u037b\3\2\2\2\u0382")
        buf.write("\u037e\3\2\2\2\u0383\u0095\3\2\2\2\u0384\u0386\t\32\2")
        buf.write("\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387")
        buf.write("\3\2\2\2\u0387\u0389\7\u0091\2\2\u0388\u038a\5\u0080A")
        buf.write("\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038d")
        buf.write("\3\2\2\2\u038b\u038e\5\u008cG\2\u038c\u038e\7@\2\2\u038d")
        buf.write("\u038b\3\2\2\2\u038d\u038c\3\2\2\2\u038e\u0390\3\2\2\2")
        buf.write("\u038f\u0391\t\20\2\2\u0390\u038f\3\2\2\2\u0390\u0391")
        buf.write("\3\2\2\2\u0391\u03d6\3\2\2\2\u0392\u0394\7C\2\2\u0393")
        buf.write("\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\3\2\2\2")
        buf.write("\u0395\u0397\7\u0092\2\2\u0396\u0398\5\u008aF\2\u0397")
        buf.write("\u0396\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\3\2\2\2")
        buf.write("\u0399\u039b\t\20\2\2\u039a\u0399\3\2\2\2\u039a\u039b")
        buf.write("\3\2\2\2\u039b\u03d6\3\2\2\2\u039c\u039e\t\32\2\2\u039d")
        buf.write("\u039c\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0\3\2\2\2")
        buf.write("\u039f\u03a1\7C\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3")
        buf.write("\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\t\33\2\2\u03a3")
        buf.write("\u03a5\5\u008aF\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2")
        buf.write("\2\2\u03a5\u03d6\3\2\2\2\u03a6\u03a8\t\32\2\2\u03a7\u03a6")
        buf.write("\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03aa\3\2\2\2\u03a9")
        buf.write("\u03ab\5\u0092J\2\u03aa\u03a9\3\2\2\2\u03aa\u03ab\3\2")
        buf.write("\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\5\u0094K\2\u03ad")
        buf.write("\u03af\5\u008aF\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2")
        buf.write("\2\2\u03af\u03b1\3\2\2\2\u03b0\u03b2\t\20\2\2\u03b1\u03b0")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03d6\3\2\2\2\u03b3")
        buf.write("\u03b5\t\32\2\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2\2")
        buf.write("\2\u03b5\u03b7\3\2\2\2\u03b6\u03b8\7C\2\2\u03b7\u03b6")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\7\u0095\2\2\u03ba\u03bb\5\u00d0i\2\u03bb\u03bd")
        buf.write("\7m\2\2\u03bc\u03be\t\20\2\2\u03bd\u03bc\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03d6\3\2\2\2\u03bf\u03c1\7\u0096")
        buf.write("\2\2\u03c0\u03c2\t\31\2\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2")
        buf.write("\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03c5\5\u008aF\2\u03c4")
        buf.write("\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03d6\3\2\2\2")
        buf.write("\u03c6\u03c8\7\u0097\2\2\u03c7\u03c9\t\31\2\2\u03c8\u03c7")
        buf.write("\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cb\3\2\2\2\u03ca")
        buf.write("\u03cc\5\u008aF\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2")
        buf.write("\2\2\u03cc\u03d6\3\2\2\2\u03cd\u03cf\7\u008e\2\2\u03ce")
        buf.write("\u03d0\5\u008aF\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2")
        buf.write("\2\2\u03d0\u03d6\3\2\2\2\u03d1\u03d3\7\u008f\2\2\u03d2")
        buf.write("\u03d4\5\u008aF\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4\3\2")
        buf.write("\2\2\u03d4\u03d6\3\2\2\2\u03d5\u0385\3\2\2\2\u03d5\u0393")
        buf.write("\3\2\2\2\u03d5\u039d\3\2\2\2\u03d5\u03a7\3\2\2\2\u03d5")
        buf.write("\u03b4\3\2\2\2\u03d5\u03bf\3\2\2\2\u03d5\u03c6\3\2\2\2")
        buf.write("\u03d5\u03cd\3\2\2\2\u03d5\u03d1\3\2\2\2\u03d6\u0097\3")
        buf.write("\2\2\2\u03d7\u03e5\5\u009eP\2\u03d8\u03e5\5\u00a4S\2\u03d9")
        buf.write("\u03e5\5\u00ccg\2\u03da\u03e5\5\u00a6T\2\u03db\u03e5\5")
        buf.write("\u00a8U\2\u03dc\u03e5\5\u00acW\2\u03dd\u03e5\5\u00b0Y")
        buf.write("\2\u03de\u03e5\5\u00b4[\2\u03df\u03e5\5\u00b6\\\2\u03e0")
        buf.write("\u03e1\7!\2\2\u03e1\u03e2\5~@\2\u03e2\u03e3\7\"\2\2\u03e3")
        buf.write("\u03e5\3\2\2\2\u03e4\u03d7\3\2\2\2\u03e4\u03d8\3\2\2\2")
        buf.write("\u03e4\u03d9\3\2\2\2\u03e4\u03da\3\2\2\2\u03e4\u03db\3")
        buf.write("\2\2\2\u03e4\u03dc\3\2\2\2\u03e4\u03dd\3\2\2\2\u03e4\u03de")
        buf.write("\3\2\2\2\u03e4\u03df\3\2\2\2\u03e4\u03e0\3\2\2\2\u03e5")
        buf.write("\u0099\3\2\2\2\u03e6\u03e9\5\u00c4c\2\u03e7\u03e9\5\u009c")
        buf.write("O\2\u03e8\u03e6\3\2\2\2\u03e8\u03e7\3\2\2\2\u03e9\u009b")
        buf.write("\3\2\2\2\u03ea\u03eb\5\u00c8e\2\u03eb\u03ed\7!\2\2\u03ec")
        buf.write("\u03ee\5\u00ceh\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2")
        buf.write("\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\7\"\2\2\u03f0\u009d")
        buf.write("\3\2\2\2\u03f1\u03f7\5\u00c4c\2\u03f2\u03f7\5\u00a0Q\2")
        buf.write("\u03f3\u03f7\7\u0098\2\2\u03f4\u03f7\7\u0099\2\2\u03f5")
        buf.write("\u03f7\7\u009a\2\2\u03f6\u03f1\3\2\2\2\u03f6\u03f2\3\2")
        buf.write("\2\2\u03f6\u03f3\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f5")
        buf.write("\3\2\2\2\u03f7\u009f\3\2\2\2\u03f8\u03f9\5\u00c4c\2\u03f9")
        buf.write("\u03fb\7!\2\2\u03fa\u03fc\5\u00ceh\2\u03fb\u03fa\3\2\2")
        buf.write("\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe")
        buf.write("\7\"\2\2\u03fe\u00a1\3\2\2\2\u03ff\u0400\5\u00d0i\2\u0400")
        buf.write("\u0401\7\r\2\2\u0401\u0402\5\u00d0i\2\u0402\u00a3\3\2")
        buf.write("\2\2\u0403\u040e\t\34\2\2\u0404\u040e\7=\2\2\u0405\u040e")
        buf.write("\7\u00a6\2\2\u0406\u040e\7\u00a7\2\2\u0407\u040e\7\u00a1")
        buf.write("\2\2\u0408\u040e\7\u00a0\2\2\u0409\u040e\7\u00a2\2\2\u040a")
        buf.write("\u040e\7\u00a3\2\2\u040b\u040e\5\u00d0i\2\u040c\u040e")
        buf.write("\5\u00a2R\2\u040d\u0403\3\2\2\2\u040d\u0404\3\2\2\2\u040d")
        buf.write("\u0405\3\2\2\2\u040d\u0406\3\2\2\2\u040d\u0407\3\2\2\2")
        buf.write("\u040d\u0408\3\2\2\2\u040d\u0409\3\2\2\2\u040d\u040a\3")
        buf.write("\2\2\2\u040d\u040b\3\2\2\2\u040d\u040c\3\2\2\2\u040e\u00a5")
        buf.write("\3\2\2\2\u040f\u0410\7\32\2\2\u0410\u0411\t\35\2\2\u0411")
        buf.write("\u0412\5~@\2\u0412\u0413\7\21\2\2\u0413\u0414\5~@\2\u0414")
        buf.write("\u0415\t\36\2\2\u0415\u00a7\3\2\2\2\u0416\u0418\7\33\2")
        buf.write("\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419")
        buf.write("\3\2\2\2\u0419\u0423\7\20\2\2\u041a\u0424\7\r\2\2\u041b")
        buf.write("\u0420\5\u00aaV\2\u041c\u041d\7\21\2\2\u041d\u041f\5\u00aa")
        buf.write("V\2\u041e\u041c\3\2\2\2\u041f\u0422\3\2\2\2\u0420\u041e")
        buf.write("\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0424\3\2\2\2\u0422")
        buf.write("\u0420\3\2\2\2\u0423\u041a\3\2\2\2\u0423\u041b\3\2\2\2")
        buf.write("\u0424\u0425\3\2\2\2\u0425\u0426\7\22\2\2\u0426\u00a9")
        buf.write("\3\2\2\2\u0427\u0428\5\u00c4c\2\u0428\u0429\7\r\2\2\u0429")
        buf.write("\u042a\5~@\2\u042a\u00ab\3\2\2\2\u042b\u042c\5,\27\2\u042c")
        buf.write("\u0436\7\20\2\2\u042d\u0437\7\r\2\2\u042e\u0433\5\u00ae")
        buf.write("X\2\u042f\u0430\7\21\2\2\u0430\u0432\5\u00aeX\2\u0431")
        buf.write("\u042f\3\2\2\2\u0432\u0435\3\2\2\2\u0433\u0431\3\2\2\2")
        buf.write("\u0433\u0434\3\2\2\2\u0434\u0437\3\2\2\2\u0435\u0433\3")
        buf.write("\2\2\2\u0436\u042d\3\2\2\2\u0436\u042e\3\2\2\2\u0437\u0438")
        buf.write("\3\2\2\2\u0438\u0439\7\22\2\2\u0439\u00ad\3\2\2\2\u043a")
        buf.write("\u043b\5\u00c4c\2\u043b\u043c\7\r\2\2\u043c\u043d\5~@")
        buf.write("\2\u043d\u00af\3\2\2\2\u043e\u0443\7\27\2\2\u043f\u0440")
        buf.write("\7\30\2\2\u0440\u0441\5*\26\2\u0441\u0442\7\31\2\2\u0442")
        buf.write("\u0444\3\2\2\2\u0443\u043f\3\2\2\2\u0443\u0444\3\2\2\2")
        buf.write("\u0444\u0446\3\2\2\2\u0445\u043e\3\2\2\2\u0445\u0446\3")
        buf.write("\2\2\2\u0446\u0447\3\2\2\2\u0447\u0450\7\20\2\2\u0448")
        buf.write("\u044d\5~@\2\u0449\u044a\7\21\2\2\u044a\u044c\5~@\2\u044b")
        buf.write("\u0449\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b\3\2\2\2")
        buf.write("\u044d\u044e\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u044d\3")
        buf.write("\2\2\2\u0450\u0448\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452")
        buf.write("\3\2\2\2\u0452\u0453\7\22\2\2\u0453\u00b1\3\2\2\2\u0454")
        buf.write("\u0455\7\u009b\2\2\u0455\u0456\7\u00a6\2\2\u0456\u00b3")
        buf.write("\3\2\2\2\u0457\u0458\7\u009c\2\2\u0458\u0459\7\u00a6\2")
        buf.write("\2\u0459\u045a\7\25\2\2\u045a\u045c\5\30\r\2\u045b\u045d")
        buf.write("\5\u00b2Z\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d")
        buf.write("\u00b5\3\2\2\2\u045e\u045f\7\u009d\2\2\u045f\u0460\7\20")
        buf.write("\2\2\u0460\u0465\5\u00b4[\2\u0461\u0462\7\21\2\2\u0462")
        buf.write("\u0464\5\u00b4[\2\u0463\u0461\3\2\2\2\u0464\u0467\3\2")
        buf.write("\2\2\u0465\u0463\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468")
        buf.write("\3\2\2\2\u0467\u0465\3\2\2\2\u0468\u046a\7\22\2\2\u0469")
        buf.write("\u046b\5\u00b2Z\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2")
        buf.write("\2\2\u046b\u00b7\3\2\2\2\u046c\u046d\t\37\2\2\u046d\u00b9")
        buf.write("\3\2\2\2\u046e\u046f\t \2\2\u046f\u00bb\3\2\2\2\u0470")
        buf.write("\u0471\t!\2\2\u0471\u00bd\3\2\2\2\u0472\u0473\t\"\2\2")
        buf.write("\u0473\u00bf\3\2\2\2\u0474\u0475\t#\2\2\u0475\u00c1\3")
        buf.write("\2\2\2\u0476\u0477\t$\2\2\u0477\u00c3\3\2\2\2\u0478\u047b")
        buf.write("\5\u00caf\2\u0479\u047b\5\u00bc_\2\u047a\u0478\3\2\2\2")
        buf.write("\u047a\u0479\3\2\2\2\u047b\u00c5\3\2\2\2\u047c\u047f\5")
        buf.write("\u00c4c\2\u047d\u047f\5\u00c2b\2\u047e\u047c\3\2\2\2\u047e")
        buf.write("\u047d\3\2\2\2\u047f\u00c7\3\2\2\2\u0480\u0483\5\u00ca")
        buf.write("f\2\u0481\u0483\5\u00c0a\2\u0482\u0480\3\2\2\2\u0482\u0481")
        buf.write("\3\2\2\2\u0483\u00c9\3\2\2\2\u0484\u0485\t%\2\2\u0485")
        buf.write("\u00cb\3\2\2\2\u0486\u0489\7\u009e\2\2\u0487\u048a\5\u00ca")
        buf.write("f\2\u0488\u048a\7\u00a6\2\2\u0489\u0487\3\2\2\2\u0489")
        buf.write("\u0488\3\2\2\2\u048a\u00cd\3\2\2\2\u048b\u0490\5~@\2\u048c")
        buf.write("\u048d\7\21\2\2\u048d\u048f\5~@\2\u048e\u048c\3\2\2\2")
        buf.write("\u048f\u0492\3\2\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3")
        buf.write("\2\2\2\u0491\u00cf\3\2\2\2\u0492\u0490\3\2\2\2\u0493\u0495")
        buf.write("\7\u00a7\2\2\u0494\u0496\5\u00d2j\2\u0495\u0494\3\2\2")
        buf.write("\2\u0495\u0496\3\2\2\2\u0496\u00d1\3\2\2\2\u0497\u049b")
        buf.write("\5\u0080A\2\u0498\u049b\5\u0084C\2\u0499\u049b\7\u00a6")
        buf.write("\2\2\u049a\u0497\3\2\2\2\u049a\u0498\3\2\2\2\u049a\u0499")
        buf.write("\3\2\2\2\u049b\u00d3\3\2\2\2\u0087\u00db\u00de\u00e3\u00e9")
        buf.write("\u00f2\u00f8\u00fe\u0102\u0109\u010e\u0112\u0115\u011d")
        buf.write("\u0120\u0128\u012b\u0134\u013c\u0143\u014c\u014f\u015a")
        buf.write("\u015f\u0164\u0175\u017c\u0194\u01a3\u01ab\u01af\u01b9")
        buf.write("\u01bf\u01c2\u01cc\u01cf\u01d4\u01d9\u01e6\u01ef\u01ff")
        buf.write("\u0206\u0209\u0215\u021b\u0220\u0224\u0228\u022b\u022e")
        buf.write("\u0235\u023e\u024a\u0250\u0254\u0260\u026a\u026d\u0273")
        buf.write("\u027a\u0284\u0296\u0298\u029d\u02ae\u02be\u02cd\u02df")
        buf.write("\u02e7\u02ee\u02f0\u02f9\u0304\u0335\u033a\u0347\u0349")
        buf.write("\u034b\u035e\u0360\u0373\u0378\u037b\u0380\u0382\u0385")
        buf.write("\u0389\u038d\u0390\u0393\u0397\u039a\u039d\u03a0\u03a4")
        buf.write("\u03a7\u03aa\u03ae\u03b1\u03b4\u03b7\u03bd\u03c1\u03c4")
        buf.write("\u03c8\u03cb\u03cf\u03d3\u03d5\u03e4\u03e8\u03ed\u03f6")
        buf.write("\u03fb\u040d\u0417\u0420\u0423\u0433\u0436\u0443\u0445")
        buf.write("\u044d\u0450\u045c\u0465\u046a\u047a\u047e\u0482\u0489")
        buf.write("\u0490\u0495\u049a")
        return buf.getvalue()


class cqlParser ( Parser ):

    grammarFileName = "cql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'library'", "'version'", "'using'", "'include'", 
                     "'called'", "'public'", "'private'", "'parameter'", 
                     "'default'", "'codesystem'", "':'", "'valueset'", "'codesystems'", 
                     "'{'", "','", "'}'", "'.'", "'code'", "'from'", "'concept'", 
                     "'List'", "'<'", "'>'", "'Interval'", "'Tuple'", "'Choice'", 
                     "'define'", "'context'", "'fluent'", "'function'", 
                     "'('", "')'", "'returns'", "'external'", "'with'", 
                     "'such that'", "'without'", "'['", "'->'", "']'", "'in'", 
                     "'='", "'~'", "'let'", "'where'", "'return'", "'all'", 
                     "'distinct'", "'aggregate'", "'starting'", "'sort'", 
                     "'by'", "'asc'", "'ascending'", "'desc'", "'descending'", 
                     "'is'", "'not'", "'null'", "'true'", "'false'", "'as'", 
                     "'cast'", "'exists'", "'properly'", "'between'", "'and'", 
                     "'duration'", "'difference'", "'<='", "'>='", "'!='", 
                     "'!~'", "'contains'", "'or'", "'xor'", "'implies'", 
                     "'|'", "'union'", "'intersect'", "'except'", "'year'", 
                     "'month'", "'week'", "'day'", "'hour'", "'minute'", 
                     "'second'", "'millisecond'", "'date'", "'time'", "'timezoneoffset'", 
                     "'years'", "'months'", "'weeks'", "'days'", "'hours'", 
                     "'minutes'", "'seconds'", "'milliseconds'", "'convert'", 
                     "'to'", "'+'", "'-'", "'start'", "'end'", "'of'", "'width'", 
                     "'successor'", "'predecessor'", "'singleton'", "'point'", 
                     "'minimum'", "'maximum'", "'^'", "'*'", "'/'", "'div'", 
                     "'mod'", "'&'", "'if'", "'then'", "'else'", "'case'", 
                     "'flatten'", "'expand'", "'collapse'", "'per'", "'when'", 
                     "'or before'", "'or after'", "'or more'", "'or less'", 
                     "'less than'", "'more than'", "'on or'", "'before'", 
                     "'after'", "'or on'", "'starts'", "'ends'", "'occurs'", 
                     "'same'", "'includes'", "'during'", "'included in'", 
                     "'within'", "'meets'", "'overlaps'", "'$this'", "'$index'", 
                     "'$total'", "'display'", "'Code'", "'Concept'", "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "QUOTEDIDENTIFIER", "DATETIME", "LONGNUMBER", 
                      "DATE", "TIME", "IDENTIFIER", "DELIMITEDIDENTIFIER", 
                      "STRING", "NUMBER", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_definition = 0
    RULE_library = 1
    RULE_libraryDefinition = 2
    RULE_usingDefinition = 3
    RULE_includeDefinition = 4
    RULE_localIdentifier = 5
    RULE_accessModifier = 6
    RULE_parameterDefinition = 7
    RULE_codesystemDefinition = 8
    RULE_valuesetDefinition = 9
    RULE_codesystems = 10
    RULE_codesystemIdentifier = 11
    RULE_libraryIdentifier = 12
    RULE_codeDefinition = 13
    RULE_conceptDefinition = 14
    RULE_codeIdentifier = 15
    RULE_codesystemId = 16
    RULE_valuesetId = 17
    RULE_versionSpecifier = 18
    RULE_codeId = 19
    RULE_typeSpecifier = 20
    RULE_namedTypeSpecifier = 21
    RULE_modelIdentifier = 22
    RULE_listTypeSpecifier = 23
    RULE_intervalTypeSpecifier = 24
    RULE_tupleTypeSpecifier = 25
    RULE_tupleElementDefinition = 26
    RULE_choiceTypeSpecifier = 27
    RULE_statement = 28
    RULE_expressionDefinition = 29
    RULE_contextDefinition = 30
    RULE_functionDefinition = 31
    RULE_operandDefinition = 32
    RULE_functionBody = 33
    RULE_querySource = 34
    RULE_aliasedQuerySource = 35
    RULE_alias = 36
    RULE_queryInclusionClause = 37
    RULE_withClause = 38
    RULE_withoutClause = 39
    RULE_retrieve = 40
    RULE_contextIdentifier = 41
    RULE_codePath = 42
    RULE_codeComparator = 43
    RULE_terminology = 44
    RULE_qualifier = 45
    RULE_query = 46
    RULE_sourceClause = 47
    RULE_letClause = 48
    RULE_letClauseItem = 49
    RULE_whereClause = 50
    RULE_returnClause = 51
    RULE_aggregateClause = 52
    RULE_startingClause = 53
    RULE_sortClause = 54
    RULE_sortDirection = 55
    RULE_sortByItem = 56
    RULE_qualifiedIdentifier = 57
    RULE_qualifiedIdentifierExpression = 58
    RULE_qualifierExpression = 59
    RULE_simplePath = 60
    RULE_simpleLiteral = 61
    RULE_expression = 62
    RULE_dateTimePrecision = 63
    RULE_dateTimeComponent = 64
    RULE_pluralDateTimePrecision = 65
    RULE_expressionTerm = 66
    RULE_caseExpressionItem = 67
    RULE_dateTimePrecisionSpecifier = 68
    RULE_relativeQualifier = 69
    RULE_offsetRelativeQualifier = 70
    RULE_exclusiveRelativeQualifier = 71
    RULE_quantityOffset = 72
    RULE_temporalRelationship = 73
    RULE_intervalOperatorPhrase = 74
    RULE_term = 75
    RULE_qualifiedInvocation = 76
    RULE_qualifiedFunction = 77
    RULE_invocation = 78
    RULE_function = 79
    RULE_ratio = 80
    RULE_literal = 81
    RULE_intervalSelector = 82
    RULE_tupleSelector = 83
    RULE_tupleElementSelector = 84
    RULE_instanceSelector = 85
    RULE_instanceElementSelector = 86
    RULE_listSelector = 87
    RULE_displayClause = 88
    RULE_codeSelector = 89
    RULE_conceptSelector = 90
    RULE_keyword = 91
    RULE_reservedWord = 92
    RULE_keywordIdentifier = 93
    RULE_obsoleteIdentifier = 94
    RULE_functionIdentifier = 95
    RULE_typeNameIdentifier = 96
    RULE_referentialIdentifier = 97
    RULE_referentialOrTypeNameIdentifier = 98
    RULE_identifierOrFunctionIdentifier = 99
    RULE_identifier = 100
    RULE_externalConstant = 101
    RULE_paramList = 102
    RULE_quantity = 103
    RULE_unit = 104

    ruleNames =  [ "definition", "library", "libraryDefinition", "usingDefinition", 
                   "includeDefinition", "localIdentifier", "accessModifier", 
                   "parameterDefinition", "codesystemDefinition", "valuesetDefinition", 
                   "codesystems", "codesystemIdentifier", "libraryIdentifier", 
                   "codeDefinition", "conceptDefinition", "codeIdentifier", 
                   "codesystemId", "valuesetId", "versionSpecifier", "codeId", 
                   "typeSpecifier", "namedTypeSpecifier", "modelIdentifier", 
                   "listTypeSpecifier", "intervalTypeSpecifier", "tupleTypeSpecifier", 
                   "tupleElementDefinition", "choiceTypeSpecifier", "statement", 
                   "expressionDefinition", "contextDefinition", "functionDefinition", 
                   "operandDefinition", "functionBody", "querySource", "aliasedQuerySource", 
                   "alias", "queryInclusionClause", "withClause", "withoutClause", 
                   "retrieve", "contextIdentifier", "codePath", "codeComparator", 
                   "terminology", "qualifier", "query", "sourceClause", 
                   "letClause", "letClauseItem", "whereClause", "returnClause", 
                   "aggregateClause", "startingClause", "sortClause", "sortDirection", 
                   "sortByItem", "qualifiedIdentifier", "qualifiedIdentifierExpression", 
                   "qualifierExpression", "simplePath", "simpleLiteral", 
                   "expression", "dateTimePrecision", "dateTimeComponent", 
                   "pluralDateTimePrecision", "expressionTerm", "caseExpressionItem", 
                   "dateTimePrecisionSpecifier", "relativeQualifier", "offsetRelativeQualifier", 
                   "exclusiveRelativeQualifier", "quantityOffset", "temporalRelationship", 
                   "intervalOperatorPhrase", "term", "qualifiedInvocation", 
                   "qualifiedFunction", "invocation", "function", "ratio", 
                   "literal", "intervalSelector", "tupleSelector", "tupleElementSelector", 
                   "instanceSelector", "instanceElementSelector", "listSelector", 
                   "displayClause", "codeSelector", "conceptSelector", "keyword", 
                   "reservedWord", "keywordIdentifier", "obsoleteIdentifier", 
                   "functionIdentifier", "typeNameIdentifier", "referentialIdentifier", 
                   "referentialOrTypeNameIdentifier", "identifierOrFunctionIdentifier", 
                   "identifier", "externalConstant", "paramList", "quantity", 
                   "unit" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    QUOTEDIDENTIFIER=157
    DATETIME=158
    LONGNUMBER=159
    DATE=160
    TIME=161
    IDENTIFIER=162
    DELIMITEDIDENTIFIER=163
    STRING=164
    NUMBER=165
    WS=166
    COMMENT=167
    LINE_COMMENT=168

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class DefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def usingDefinition(self):
            return self.getTypedRuleContext(cqlParser.UsingDefinitionContext,0)


        def includeDefinition(self):
            return self.getTypedRuleContext(cqlParser.IncludeDefinitionContext,0)


        def codesystemDefinition(self):
            return self.getTypedRuleContext(cqlParser.CodesystemDefinitionContext,0)


        def valuesetDefinition(self):
            return self.getTypedRuleContext(cqlParser.ValuesetDefinitionContext,0)


        def codeDefinition(self):
            return self.getTypedRuleContext(cqlParser.CodeDefinitionContext,0)


        def conceptDefinition(self):
            return self.getTypedRuleContext(cqlParser.ConceptDefinitionContext,0)


        def parameterDefinition(self):
            return self.getTypedRuleContext(cqlParser.ParameterDefinitionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = cqlParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_definition)
        try:
            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 210
                self.usingDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 211
                self.includeDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 212
                self.codesystemDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 213
                self.valuesetDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 214
                self.codeDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 215
                self.conceptDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 216
                self.parameterDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(cqlParser.EOF, 0)

        def libraryDefinition(self):
            return self.getTypedRuleContext(cqlParser.LibraryDefinitionContext,0)


        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.DefinitionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(cqlParser.StatementContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary" ):
                listener.enterLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary" ):
                listener.exitLibrary(self)




    def library(self):

        localctx = cqlParser.LibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__0:
                self.state = 219
                self.libraryDefinition()


            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19))) != 0):
                self.state = 222
                self.definition()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__26 or _la==cqlParser.T__27:
                self.state = 228
                self.statement()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(cqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_libraryDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDefinition" ):
                listener.enterLibraryDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDefinition" ):
                listener.exitLibraryDefinition(self)




    def libraryDefinition(self):

        localctx = cqlParser.LibraryDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_libraryDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(cqlParser.T__0)
            self.state = 237
            self.qualifiedIdentifier()
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 238
                self.match(cqlParser.T__1)
                self.state = 239
                self.versionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modelIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ModelIdentifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_usingDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDefinition" ):
                listener.enterUsingDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDefinition" ):
                listener.exitUsingDefinition(self)




    def usingDefinition(self):

        localctx = cqlParser.UsingDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_usingDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(cqlParser.T__2)
            self.state = 243
            self.modelIdentifier()
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 244
                self.match(cqlParser.T__1)
                self.state = 245
                self.versionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def localIdentifier(self):
            return self.getTypedRuleContext(cqlParser.LocalIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_includeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeDefinition" ):
                listener.enterIncludeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeDefinition" ):
                listener.exitIncludeDefinition(self)




    def includeDefinition(self):

        localctx = cqlParser.IncludeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_includeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(cqlParser.T__3)
            self.state = 249
            self.qualifiedIdentifier()
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 250
                self.match(cqlParser.T__1)
                self.state = 251
                self.versionSpecifier()


            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__4:
                self.state = 254
                self.match(cqlParser.T__4)
                self.state = 255
                self.localIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_localIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalIdentifier" ):
                listener.enterLocalIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalIdentifier" ):
                listener.exitLocalIdentifier(self)




    def localIdentifier(self):

        localctx = cqlParser.LocalIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_localIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_accessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModifier" ):
                listener.enterAccessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModifier" ):
                listener.exitAccessModifier(self)




    def accessModifier(self):

        localctx = cqlParser.AccessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_accessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__5 or _la==cqlParser.T__6):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_parameterDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDefinition" ):
                listener.enterParameterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDefinition" ):
                listener.exitParameterDefinition(self)




    def parameterDefinition(self):

        localctx = cqlParser.ParameterDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameterDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 262
                self.accessModifier()


            self.state = 265
            self.match(cqlParser.T__7)
            self.state = 266
            self.identifier()
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 267
                self.typeSpecifier()


            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__8:
                self.state = 270
                self.match(cqlParser.T__8)
                self.state = 271
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodesystemDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def codesystemId(self):
            return self.getTypedRuleContext(cqlParser.CodesystemIdContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codesystemDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystemDefinition" ):
                listener.enterCodesystemDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystemDefinition" ):
                listener.exitCodesystemDefinition(self)




    def codesystemDefinition(self):

        localctx = cqlParser.CodesystemDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_codesystemDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 274
                self.accessModifier()


            self.state = 277
            self.match(cqlParser.T__9)
            self.state = 278
            self.identifier()
            self.state = 279
            self.match(cqlParser.T__10)
            self.state = 280
            self.codesystemId()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 281
                self.match(cqlParser.T__1)
                self.state = 282
                self.versionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def valuesetId(self):
            return self.getTypedRuleContext(cqlParser.ValuesetIdContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def codesystems(self):
            return self.getTypedRuleContext(cqlParser.CodesystemsContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_valuesetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesetDefinition" ):
                listener.enterValuesetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesetDefinition" ):
                listener.exitValuesetDefinition(self)




    def valuesetDefinition(self):

        localctx = cqlParser.ValuesetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_valuesetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 285
                self.accessModifier()


            self.state = 288
            self.match(cqlParser.T__11)
            self.state = 289
            self.identifier()
            self.state = 290
            self.match(cqlParser.T__10)
            self.state = 291
            self.valuesetId()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 292
                self.match(cqlParser.T__1)
                self.state = 293
                self.versionSpecifier()


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__12:
                self.state = 296
                self.codesystems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodesystemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codesystemIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodesystemIdentifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodesystemIdentifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_codesystems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystems" ):
                listener.enterCodesystems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystems" ):
                listener.exitCodesystems(self)




    def codesystems(self):

        localctx = cqlParser.CodesystemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_codesystems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(cqlParser.T__12)
            self.state = 300
            self.match(cqlParser.T__13)
            self.state = 301
            self.codesystemIdentifier()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 302
                self.match(cqlParser.T__14)
                self.state = 303
                self.codesystemIdentifier()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 309
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodesystemIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def libraryIdentifier(self):
            return self.getTypedRuleContext(cqlParser.LibraryIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codesystemIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystemIdentifier" ):
                listener.enterCodesystemIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystemIdentifier" ):
                listener.exitCodesystemIdentifier(self)




    def codesystemIdentifier(self):

        localctx = cqlParser.CodesystemIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_codesystemIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 311
                self.libraryIdentifier()
                self.state = 312
                self.match(cqlParser.T__16)


            self.state = 316
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_libraryIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryIdentifier" ):
                listener.enterLibraryIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryIdentifier" ):
                listener.exitLibraryIdentifier(self)




    def libraryIdentifier(self):

        localctx = cqlParser.LibraryIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_libraryIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def codeId(self):
            return self.getTypedRuleContext(cqlParser.CodeIdContext,0)


        def codesystemIdentifier(self):
            return self.getTypedRuleContext(cqlParser.CodesystemIdentifierContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeDefinition" ):
                listener.enterCodeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeDefinition" ):
                listener.exitCodeDefinition(self)




    def codeDefinition(self):

        localctx = cqlParser.CodeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_codeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 320
                self.accessModifier()


            self.state = 323
            self.match(cqlParser.T__17)
            self.state = 324
            self.identifier()
            self.state = 325
            self.match(cqlParser.T__10)
            self.state = 326
            self.codeId()
            self.state = 327
            self.match(cqlParser.T__18)
            self.state = 328
            self.codesystemIdentifier()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__152:
                self.state = 329
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConceptDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def codeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodeIdentifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodeIdentifierContext,i)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_conceptDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConceptDefinition" ):
                listener.enterConceptDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConceptDefinition" ):
                listener.exitConceptDefinition(self)




    def conceptDefinition(self):

        localctx = cqlParser.ConceptDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_conceptDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 332
                self.accessModifier()


            self.state = 335
            self.match(cqlParser.T__19)
            self.state = 336
            self.identifier()
            self.state = 337
            self.match(cqlParser.T__10)
            self.state = 338
            self.match(cqlParser.T__13)
            self.state = 339
            self.codeIdentifier()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 340
                self.match(cqlParser.T__14)
                self.state = 341
                self.codeIdentifier()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 347
            self.match(cqlParser.T__15)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__152:
                self.state = 348
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def libraryIdentifier(self):
            return self.getTypedRuleContext(cqlParser.LibraryIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeIdentifier" ):
                listener.enterCodeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeIdentifier" ):
                listener.exitCodeIdentifier(self)




    def codeIdentifier(self):

        localctx = cqlParser.CodeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_codeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 351
                self.libraryIdentifier()
                self.state = 352
                self.match(cqlParser.T__16)


            self.state = 356
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodesystemIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_codesystemId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystemId" ):
                listener.enterCodesystemId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystemId" ):
                listener.exitCodesystemId(self)




    def codesystemId(self):

        localctx = cqlParser.CodesystemIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_codesystemId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesetIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_valuesetId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesetId" ):
                listener.enterValuesetId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesetId" ):
                listener.exitValuesetId(self)




    def valuesetId(self):

        localctx = cqlParser.ValuesetIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_valuesetId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_versionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionSpecifier" ):
                listener.enterVersionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionSpecifier" ):
                listener.exitVersionSpecifier(self)




    def versionSpecifier(self):

        localctx = cqlParser.VersionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_versionSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_codeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeId" ):
                listener.enterCodeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeId" ):
                listener.exitCodeId(self)




    def codeId(self):

        localctx = cqlParser.CodeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_codeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def listTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.ListTypeSpecifierContext,0)


        def intervalTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.IntervalTypeSpecifierContext,0)


        def tupleTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TupleTypeSpecifierContext,0)


        def choiceTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.ChoiceTypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = cqlParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeSpecifier)
        try:
            self.state = 371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__44, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__117, cqlParser.T__118, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152, cqlParser.T__153, cqlParser.T__154, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.namedTypeSpecifier()
                pass
            elif token in [cqlParser.T__20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.listTypeSpecifier()
                pass
            elif token in [cqlParser.T__23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                self.intervalTypeSpecifier()
                pass
            elif token in [cqlParser.T__24]:
                self.enterOuterAlt(localctx, 4)
                self.state = 369
                self.tupleTypeSpecifier()
                pass
            elif token in [cqlParser.T__25]:
                self.enterOuterAlt(localctx, 5)
                self.state = 370
                self.choiceTypeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialOrTypeNameIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialOrTypeNameIdentifierContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QualifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.QualifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_namedTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedTypeSpecifier" ):
                listener.enterNamedTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedTypeSpecifier" ):
                listener.exitNamedTypeSpecifier(self)




    def namedTypeSpecifier(self):

        localctx = cqlParser.NamedTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_namedTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 373
                    self.qualifier()
                    self.state = 374
                    self.match(cqlParser.T__16) 
                self.state = 380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 381
            self.referentialOrTypeNameIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModelIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_modelIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModelIdentifier" ):
                listener.enterModelIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModelIdentifier" ):
                listener.exitModelIdentifier(self)




    def modelIdentifier(self):

        localctx = cqlParser.ModelIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_modelIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_listTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListTypeSpecifier" ):
                listener.enterListTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListTypeSpecifier" ):
                listener.exitListTypeSpecifier(self)




    def listTypeSpecifier(self):

        localctx = cqlParser.ListTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_listTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(cqlParser.T__20)
            self.state = 386
            self.match(cqlParser.T__21)
            self.state = 387
            self.typeSpecifier()
            self.state = 388
            self.match(cqlParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_intervalTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeSpecifier" ):
                listener.enterIntervalTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeSpecifier" ):
                listener.exitIntervalTypeSpecifier(self)




    def intervalTypeSpecifier(self):

        localctx = cqlParser.IntervalTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_intervalTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(cqlParser.T__23)
            self.state = 391
            self.match(cqlParser.T__21)
            self.state = 392
            self.typeSpecifier()
            self.state = 393
            self.match(cqlParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleElementDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.TupleElementDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.TupleElementDefinitionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleTypeSpecifier" ):
                listener.enterTupleTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleTypeSpecifier" ):
                listener.exitTupleTypeSpecifier(self)




    def tupleTypeSpecifier(self):

        localctx = cqlParser.TupleTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_tupleTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(cqlParser.T__24)
            self.state = 396
            self.match(cqlParser.T__13)
            self.state = 397
            self.tupleElementDefinition()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 398
                self.match(cqlParser.T__14)
                self.state = 399
                self.tupleElementDefinition()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 405
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleElementDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleElementDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleElementDefinition" ):
                listener.enterTupleElementDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleElementDefinition" ):
                listener.exitTupleElementDefinition(self)




    def tupleElementDefinition(self):

        localctx = cqlParser.TupleElementDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_tupleElementDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.referentialIdentifier()
            self.state = 408
            self.typeSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChoiceTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_choiceTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoiceTypeSpecifier" ):
                listener.enterChoiceTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoiceTypeSpecifier" ):
                listener.exitChoiceTypeSpecifier(self)




    def choiceTypeSpecifier(self):

        localctx = cqlParser.ChoiceTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_choiceTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(cqlParser.T__25)
            self.state = 411
            self.match(cqlParser.T__21)
            self.state = 412
            self.typeSpecifier()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 413
                self.match(cqlParser.T__14)
                self.state = 414
                self.typeSpecifier()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(cqlParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionDefinition(self):
            return self.getTypedRuleContext(cqlParser.ExpressionDefinitionContext,0)


        def contextDefinition(self):
            return self.getTypedRuleContext(cqlParser.ContextDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(cqlParser.FunctionDefinitionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = cqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_statement)
        try:
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.expressionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.contextDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 424
                self.functionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_expressionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionDefinition" ):
                listener.enterExpressionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionDefinition" ):
                listener.exitExpressionDefinition(self)




    def expressionDefinition(self):

        localctx = cqlParser.ExpressionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expressionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(cqlParser.T__26)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 428
                self.accessModifier()


            self.state = 431
            self.identifier()
            self.state = 432
            self.match(cqlParser.T__10)
            self.state = 433
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def modelIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ModelIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_contextDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextDefinition" ):
                listener.enterContextDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextDefinition" ):
                listener.exitContextDefinition(self)




    def contextDefinition(self):

        localctx = cqlParser.ContextDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_contextDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(cqlParser.T__27)
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 436
                self.modelIdentifier()
                self.state = 437
                self.match(cqlParser.T__16)


            self.state = 441
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrFunctionIdentifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierOrFunctionIdentifierContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(cqlParser.FunctionBodyContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def operandDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.OperandDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.OperandDefinitionContext,i)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = cqlParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(cqlParser.T__26)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 444
                self.accessModifier()


            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__28:
                self.state = 447
                self.match(cqlParser.T__28)


            self.state = 450
            self.match(cqlParser.T__29)
            self.state = 451
            self.identifierOrFunctionIdentifier()
            self.state = 452
            self.match(cqlParser.T__30)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__44) | (1 << cqlParser.T__49) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cqlParser.T__73 - 74)) | (1 << (cqlParser.T__75 - 74)) | (1 << (cqlParser.T__76 - 74)) | (1 << (cqlParser.T__78 - 74)) | (1 << (cqlParser.T__79 - 74)) | (1 << (cqlParser.T__80 - 74)) | (1 << (cqlParser.T__89 - 74)) | (1 << (cqlParser.T__90 - 74)) | (1 << (cqlParser.T__91 - 74)) | (1 << (cqlParser.T__104 - 74)) | (1 << (cqlParser.T__105 - 74)) | (1 << (cqlParser.T__107 - 74)) | (1 << (cqlParser.T__108 - 74)) | (1 << (cqlParser.T__109 - 74)) | (1 << (cqlParser.T__117 - 74)) | (1 << (cqlParser.T__118 - 74)) | (1 << (cqlParser.T__129 - 74)) | (1 << (cqlParser.T__130 - 74)) | (1 << (cqlParser.T__131 - 74)) | (1 << (cqlParser.T__132 - 74)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__143 - 140)) | (1 << (cqlParser.T__147 - 140)) | (1 << (cqlParser.T__148 - 140)) | (1 << (cqlParser.T__152 - 140)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 140)) | (1 << (cqlParser.IDENTIFIER - 140)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 140)))) != 0):
                self.state = 453
                self.operandDefinition()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 454
                    self.match(cqlParser.T__14)
                    self.state = 455
                    self.operandDefinition()
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 463
            self.match(cqlParser.T__31)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__32:
                self.state = 464
                self.match(cqlParser.T__32)
                self.state = 465
                self.typeSpecifier()


            self.state = 468
            self.match(cqlParser.T__10)
            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__13, cqlParser.T__17, cqlParser.T__18, cqlParser.T__19, cqlParser.T__20, cqlParser.T__23, cqlParser.T__24, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__30, cqlParser.T__37, cqlParser.T__44, cqlParser.T__47, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__57, cqlParser.T__58, cqlParser.T__59, cqlParser.T__60, cqlParser.T__62, cqlParser.T__63, cqlParser.T__67, cqlParser.T__68, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.T__97, cqlParser.T__98, cqlParser.T__99, cqlParser.T__100, cqlParser.T__102, cqlParser.T__103, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__110, cqlParser.T__111, cqlParser.T__112, cqlParser.T__113, cqlParser.T__117, cqlParser.T__118, cqlParser.T__120, cqlParser.T__123, cqlParser.T__124, cqlParser.T__125, cqlParser.T__126, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__149, cqlParser.T__150, cqlParser.T__151, cqlParser.T__152, cqlParser.T__153, cqlParser.T__154, cqlParser.T__155, cqlParser.QUOTEDIDENTIFIER, cqlParser.DATETIME, cqlParser.LONGNUMBER, cqlParser.DATE, cqlParser.TIME, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER, cqlParser.STRING, cqlParser.NUMBER]:
                self.state = 469
                self.functionBody()
                pass
            elif token in [cqlParser.T__33]:
                self.state = 470
                self.match(cqlParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_operandDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandDefinition" ):
                listener.enterOperandDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandDefinition" ):
                listener.exitOperandDefinition(self)




    def operandDefinition(self):

        localctx = cqlParser.OperandDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_operandDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.referentialIdentifier()
            self.state = 474
            self.typeSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = cqlParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def retrieve(self):
            return self.getTypedRuleContext(cqlParser.RetrieveContext,0)


        def qualifiedIdentifierExpression(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_querySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySource" ):
                listener.enterQuerySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySource" ):
                listener.exitQuerySource(self)




    def querySource(self):

        localctx = cqlParser.QuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_querySource)
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.retrieve()
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__44, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__117, cqlParser.T__118, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.qualifiedIdentifierExpression()
                pass
            elif token in [cqlParser.T__30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                self.match(cqlParser.T__30)
                self.state = 481
                self.expression(0)
                self.state = 482
                self.match(cqlParser.T__31)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedQuerySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySource(self):
            return self.getTypedRuleContext(cqlParser.QuerySourceContext,0)


        def alias(self):
            return self.getTypedRuleContext(cqlParser.AliasContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_aliasedQuerySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuerySource" ):
                listener.enterAliasedQuerySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuerySource" ):
                listener.exitAliasedQuerySource(self)




    def aliasedQuerySource(self):

        localctx = cqlParser.AliasedQuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_aliasedQuerySource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.querySource()
            self.state = 487
            self.alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = cqlParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryInclusionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withClause(self):
            return self.getTypedRuleContext(cqlParser.WithClauseContext,0)


        def withoutClause(self):
            return self.getTypedRuleContext(cqlParser.WithoutClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_queryInclusionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryInclusionClause" ):
                listener.enterQueryInclusionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryInclusionClause" ):
                listener.exitQueryInclusionClause(self)




    def queryInclusionClause(self):

        localctx = cqlParser.QueryInclusionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_queryInclusionClause)
        try:
            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.withClause()
                pass
            elif token in [cqlParser.T__36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.withoutClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasedQuerySource(self):
            return self.getTypedRuleContext(cqlParser.AliasedQuerySourceContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = cqlParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(cqlParser.T__34)
            self.state = 496
            self.aliasedQuerySource()
            self.state = 497
            self.match(cqlParser.T__35)
            self.state = 498
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithoutClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasedQuerySource(self):
            return self.getTypedRuleContext(cqlParser.AliasedQuerySourceContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_withoutClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithoutClause" ):
                listener.enterWithoutClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithoutClause" ):
                listener.exitWithoutClause(self)




    def withoutClause(self):

        localctx = cqlParser.WithoutClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_withoutClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(cqlParser.T__36)
            self.state = 501
            self.aliasedQuerySource()
            self.state = 502
            self.match(cqlParser.T__35)
            self.state = 503
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetrieveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def contextIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ContextIdentifierContext,0)


        def terminology(self):
            return self.getTypedRuleContext(cqlParser.TerminologyContext,0)


        def codePath(self):
            return self.getTypedRuleContext(cqlParser.CodePathContext,0)


        def codeComparator(self):
            return self.getTypedRuleContext(cqlParser.CodeComparatorContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_retrieve

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetrieve" ):
                listener.enterRetrieve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetrieve" ):
                listener.exitRetrieve(self)




    def retrieve(self):

        localctx = cqlParser.RetrieveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_retrieve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(cqlParser.T__37)
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 506
                self.contextIdentifier()
                self.state = 507
                self.match(cqlParser.T__38)


            self.state = 511
            self.namedTypeSpecifier()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__10:
                self.state = 512
                self.match(cqlParser.T__10)
                self.state = 516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 513
                    self.codePath()
                    self.state = 514
                    self.codeComparator()


                self.state = 518
                self.terminology()


            self.state = 521
            self.match(cqlParser.T__39)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifierExpression(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_contextIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextIdentifier" ):
                listener.enterContextIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextIdentifier" ):
                listener.exitContextIdentifier(self)




    def contextIdentifier(self):

        localctx = cqlParser.ContextIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_contextIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.qualifiedIdentifierExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePath(self):
            return self.getTypedRuleContext(cqlParser.SimplePathContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodePath" ):
                listener.enterCodePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodePath" ):
                listener.exitCodePath(self)




    def codePath(self):

        localctx = cqlParser.CodePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_codePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.simplePath(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_codeComparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeComparator" ):
                listener.enterCodeComparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeComparator" ):
                listener.exitCodeComparator(self)




    def codeComparator(self):

        localctx = cqlParser.CodeComparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_codeComparator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__40) | (1 << cqlParser.T__41) | (1 << cqlParser.T__42))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminologyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifierExpression(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_terminology

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminology" ):
                listener.enterTerminology(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminology" ):
                listener.exitTerminology(self)




    def terminology(self):

        localctx = cqlParser.TerminologyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_terminology)
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.qualifiedIdentifierExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)




    def qualifier(self):

        localctx = cqlParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceClause(self):
            return self.getTypedRuleContext(cqlParser.SourceClauseContext,0)


        def letClause(self):
            return self.getTypedRuleContext(cqlParser.LetClauseContext,0)


        def queryInclusionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QueryInclusionClauseContext)
            else:
                return self.getTypedRuleContext(cqlParser.QueryInclusionClauseContext,i)


        def whereClause(self):
            return self.getTypedRuleContext(cqlParser.WhereClauseContext,0)


        def aggregateClause(self):
            return self.getTypedRuleContext(cqlParser.AggregateClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(cqlParser.ReturnClauseContext,0)


        def sortClause(self):
            return self.getTypedRuleContext(cqlParser.SortClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = cqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.sourceClause()
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 536
                self.letClause()


            self.state = 542
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 539
                    self.queryInclusionClause() 
                self.state = 544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 545
                self.whereClause()


            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 548
                self.aggregateClause()

            elif la_ == 2:
                self.state = 549
                self.returnClause()


            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 552
                self.sortClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasedQuerySource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.AliasedQuerySourceContext)
            else:
                return self.getTypedRuleContext(cqlParser.AliasedQuerySourceContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_sourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceClause" ):
                listener.enterSourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceClause" ):
                listener.exitSourceClause(self)




    def sourceClause(self):

        localctx = cqlParser.SourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_sourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__18:
                self.state = 555
                self.match(cqlParser.T__18)


            self.state = 558
            self.aliasedQuerySource()
            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self.match(cqlParser.T__14)
                    self.state = 560
                    self.aliasedQuerySource() 
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.LetClauseItemContext)
            else:
                return self.getTypedRuleContext(cqlParser.LetClauseItemContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_letClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetClause" ):
                listener.enterLetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetClause" ):
                listener.exitLetClause(self)




    def letClause(self):

        localctx = cqlParser.LetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_letClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(cqlParser.T__43)
            self.state = 567
            self.letClauseItem()
            self.state = 572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 568
                    self.match(cqlParser.T__14)
                    self.state = 569
                    self.letClauseItem() 
                self.state = 574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_letClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetClauseItem" ):
                listener.enterLetClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetClauseItem" ):
                listener.exitLetClauseItem(self)




    def letClauseItem(self):

        localctx = cqlParser.LetClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_letClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.identifier()
            self.state = 576
            self.match(cqlParser.T__10)
            self.state = 577
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = cqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(cqlParser.T__44)
            self.state = 580
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_returnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnClause" ):
                listener.enterReturnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnClause" ):
                listener.exitReturnClause(self)




    def returnClause(self):

        localctx = cqlParser.ReturnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_returnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(cqlParser.T__45)
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 583
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__46 or _la==cqlParser.T__47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 586
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def startingClause(self):
            return self.getTypedRuleContext(cqlParser.StartingClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_aggregateClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateClause" ):
                listener.enterAggregateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateClause" ):
                listener.exitAggregateClause(self)




    def aggregateClause(self):

        localctx = cqlParser.AggregateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_aggregateClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(cqlParser.T__48)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__46 or _la==cqlParser.T__47:
                self.state = 589
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__46 or _la==cqlParser.T__47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 592
            self.identifier()
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__49:
                self.state = 593
                self.startingClause()


            self.state = 596
            self.match(cqlParser.T__10)
            self.state = 597
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleLiteral(self):
            return self.getTypedRuleContext(cqlParser.SimpleLiteralContext,0)


        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_startingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartingClause" ):
                listener.enterStartingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartingClause" ):
                listener.exitStartingClause(self)




    def startingClause(self):

        localctx = cqlParser.StartingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_startingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(cqlParser.T__49)
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 600
                self.simpleLiteral()
                pass

            elif la_ == 2:
                self.state = 601
                self.quantity()
                pass

            elif la_ == 3:
                self.state = 602
                self.match(cqlParser.T__30)
                self.state = 603
                self.expression(0)
                self.state = 604
                self.match(cqlParser.T__31)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortDirection(self):
            return self.getTypedRuleContext(cqlParser.SortDirectionContext,0)


        def sortByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.SortByItemContext)
            else:
                return self.getTypedRuleContext(cqlParser.SortByItemContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_sortClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortClause" ):
                listener.enterSortClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortClause" ):
                listener.exitSortClause(self)




    def sortClause(self):

        localctx = cqlParser.SortClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_sortClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(cqlParser.T__50)
            self.state = 619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55]:
                self.state = 609
                self.sortDirection()
                pass
            elif token in [cqlParser.T__51]:
                self.state = 610
                self.match(cqlParser.T__51)
                self.state = 611
                self.sortByItem()
                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 612
                        self.match(cqlParser.T__14)
                        self.state = 613
                        self.sortByItem() 
                    self.state = 618
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_sortDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortDirection" ):
                listener.enterSortDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortDirection" ):
                listener.exitSortDirection(self)




    def sortDirection(self):

        localctx = cqlParser.SortDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sortDirection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def sortDirection(self):
            return self.getTypedRuleContext(cqlParser.SortDirectionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_sortByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortByItem" ):
                listener.enterSortByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortByItem" ):
                listener.exitSortByItem(self)




    def sortByItem(self):

        localctx = cqlParser.SortByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_sortByItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.expressionTerm(0)
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 624
                self.sortDirection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QualifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.QualifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = cqlParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_qualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 627
                    self.qualifier()
                    self.state = 628
                    self.match(cqlParser.T__16) 
                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 635
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def qualifierExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QualifierExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.QualifierExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedIdentifierExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifierExpression" ):
                listener.enterQualifiedIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifierExpression" ):
                listener.exitQualifiedIdentifierExpression(self)




    def qualifiedIdentifierExpression(self):

        localctx = cqlParser.QualifiedIdentifierExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_qualifiedIdentifierExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 637
                    self.qualifierExpression()
                    self.state = 638
                    self.match(cqlParser.T__16) 
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 645
            self.referentialIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifierExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifierExpression" ):
                listener.enterQualifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifierExpression" ):
                listener.exitQualifierExpression(self)




    def qualifierExpression(self):

        localctx = cqlParser.QualifierExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_qualifierExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.referentialIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_simplePath

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SimplePathIndexerContext(SimplePathContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimplePathContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplePath(self):
            return self.getTypedRuleContext(cqlParser.SimplePathContext,0)

        def simpleLiteral(self):
            return self.getTypedRuleContext(cqlParser.SimpleLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathIndexer" ):
                listener.enterSimplePathIndexer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathIndexer" ):
                listener.exitSimplePathIndexer(self)


    class SimplePathQualifiedIdentifierContext(SimplePathContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimplePathContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplePath(self):
            return self.getTypedRuleContext(cqlParser.SimplePathContext,0)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathQualifiedIdentifier" ):
                listener.enterSimplePathQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathQualifiedIdentifier" ):
                listener.exitSimplePathQualifiedIdentifier(self)


    class SimplePathReferentialIdentifierContext(SimplePathContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimplePathContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathReferentialIdentifier" ):
                listener.enterSimplePathReferentialIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathReferentialIdentifier" ):
                listener.exitSimplePathReferentialIdentifier(self)



    def simplePath(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cqlParser.SimplePathContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_simplePath, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = cqlParser.SimplePathReferentialIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 650
            self.referentialIdentifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 660
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        localctx = cqlParser.SimplePathQualifiedIdentifierContext(self, cqlParser.SimplePathContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simplePath)
                        self.state = 652
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 653
                        self.match(cqlParser.T__16)
                        self.state = 654
                        self.referentialIdentifier()
                        pass

                    elif la_ == 2:
                        localctx = cqlParser.SimplePathIndexerContext(self, cqlParser.SimplePathContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simplePath)
                        self.state = 655
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 656
                        self.match(cqlParser.T__37)
                        self.state = 657
                        self.simpleLiteral()
                        self.state = 658
                        self.match(cqlParser.T__39)
                        pass

             
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SimpleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_simpleLiteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleNumberLiteralContext(SimpleLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimpleLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(cqlParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNumberLiteral" ):
                listener.enterSimpleNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNumberLiteral" ):
                listener.exitSimpleNumberLiteral(self)


    class SimpleStringLiteralContext(SimpleLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimpleLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStringLiteral" ):
                listener.enterSimpleStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStringLiteral" ):
                listener.exitSimpleStringLiteral(self)



    def simpleLiteral(self):

        localctx = cqlParser.SimpleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_simpleLiteral)
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.STRING]:
                localctx = cqlParser.SimpleStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.match(cqlParser.STRING)
                pass
            elif token in [cqlParser.NUMBER]:
                localctx = cqlParser.SimpleNumberLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(cqlParser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DurationBetweenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationBetweenExpression" ):
                listener.enterDurationBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationBetweenExpression" ):
                listener.exitDurationBetweenExpression(self)


    class InFixSetExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInFixSetExpression" ):
                listener.enterInFixSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInFixSetExpression" ):
                listener.exitInFixSetExpression(self)


    class RetrieveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def retrieve(self):
            return self.getTypedRuleContext(cqlParser.RetrieveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetrieveExpression" ):
                listener.enterRetrieveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetrieveExpression" ):
                listener.exitRetrieveExpression(self)


    class TimingExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def intervalOperatorPhrase(self):
            return self.getTypedRuleContext(cqlParser.IntervalOperatorPhraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingExpression" ):
                listener.enterTimingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingExpression" ):
                listener.exitTimingExpression(self)


    class QueryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(cqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class BooleanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpression" ):
                listener.enterBooleanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpression" ):
                listener.exitBooleanExpression(self)


    class OrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpression" ):
                listener.enterOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpression" ):
                listener.exitOrExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class AndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)


    class BetweenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenExpression" ):
                listener.enterBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenExpression" ):
                listener.exitBetweenExpression(self)


    class MembershipExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMembershipExpression" ):
                listener.enterMembershipExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMembershipExpression" ):
                listener.exitMembershipExpression(self)


    class DifferenceBetweenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDifferenceBetweenExpression" ):
                listener.enterDifferenceBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDifferenceBetweenExpression" ):
                listener.exitDifferenceBetweenExpression(self)


    class InequalityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInequalityExpression" ):
                listener.enterInequalityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInequalityExpression" ):
                listener.exitInequalityExpression(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)


    class ExistenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistenceExpression" ):
                listener.enterExistenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistenceExpression" ):
                listener.exitExistenceExpression(self)


    class ImpliesExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImpliesExpression" ):
                listener.enterImpliesExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImpliesExpression" ):
                listener.exitImpliesExpression(self)


    class TermExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermExpression" ):
                listener.enterTermExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermExpression" ):
                listener.exitTermExpression(self)


    class TypeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = cqlParser.TermExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 670
                self.expressionTerm(0)
                pass

            elif la_ == 2:
                localctx = cqlParser.RetrieveExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 671
                self.retrieve()
                pass

            elif la_ == 3:
                localctx = cqlParser.QueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 672
                self.query()
                pass

            elif la_ == 4:
                localctx = cqlParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 673
                self.match(cqlParser.T__62)
                self.state = 674
                self.expression(0)
                self.state = 675
                self.match(cqlParser.T__61)
                self.state = 676
                self.typeSpecifier()
                pass

            elif la_ == 5:
                localctx = cqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 678
                self.match(cqlParser.T__57)
                self.state = 679
                self.expression(13)
                pass

            elif la_ == 6:
                localctx = cqlParser.ExistenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 680
                self.match(cqlParser.T__63)
                self.state = 681
                self.expression(12)
                pass

            elif la_ == 7:
                localctx = cqlParser.DurationBetweenExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__67:
                    self.state = 682
                    self.match(cqlParser.T__67)
                    self.state = 683
                    self.match(cqlParser.T__40)


                self.state = 686
                self.pluralDateTimePrecision()
                self.state = 687
                self.match(cqlParser.T__65)
                self.state = 688
                self.expressionTerm(0)
                self.state = 689
                self.match(cqlParser.T__66)
                self.state = 690
                self.expressionTerm(0)
                pass

            elif la_ == 8:
                localctx = cqlParser.DifferenceBetweenExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 692
                self.match(cqlParser.T__68)
                self.state = 693
                self.match(cqlParser.T__40)
                self.state = 694
                self.pluralDateTimePrecision()
                self.state = 695
                self.match(cqlParser.T__65)
                self.state = 696
                self.expressionTerm(0)
                self.state = 697
                self.match(cqlParser.T__66)
                self.state = 698
                self.expressionTerm(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 750
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 748
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        localctx = cqlParser.InequalityExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 702
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 703
                        _la = self._input.LA(1)
                        if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & ((1 << (cqlParser.T__21 - 22)) | (1 << (cqlParser.T__22 - 22)) | (1 << (cqlParser.T__69 - 22)) | (1 << (cqlParser.T__70 - 22)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 704
                        self.expression(9)
                        pass

                    elif la_ == 2:
                        localctx = cqlParser.TimingExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 705
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 706
                        self.intervalOperatorPhrase()
                        self.state = 707
                        self.expression(8)
                        pass

                    elif la_ == 3:
                        localctx = cqlParser.EqualityExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 709
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 710
                        _la = self._input.LA(1)
                        if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (cqlParser.T__41 - 42)) | (1 << (cqlParser.T__42 - 42)) | (1 << (cqlParser.T__71 - 42)) | (1 << (cqlParser.T__72 - 42)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 711
                        self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = cqlParser.MembershipExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 712
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 713
                        _la = self._input.LA(1)
                        if not(_la==cqlParser.T__40 or _la==cqlParser.T__73):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 715
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                        if la_ == 1:
                            self.state = 714
                            self.dateTimePrecisionSpecifier()


                        self.state = 717
                        self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = cqlParser.AndExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 718
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 719
                        self.match(cqlParser.T__66)
                        self.state = 720
                        self.expression(5)
                        pass

                    elif la_ == 6:
                        localctx = cqlParser.OrExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 721
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 722
                        _la = self._input.LA(1)
                        if not(_la==cqlParser.T__74 or _la==cqlParser.T__75):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 723
                        self.expression(4)
                        pass

                    elif la_ == 7:
                        localctx = cqlParser.ImpliesExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 724
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 725
                        self.match(cqlParser.T__76)
                        self.state = 726
                        self.expression(3)
                        pass

                    elif la_ == 8:
                        localctx = cqlParser.InFixSetExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 727
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 728
                        _la = self._input.LA(1)
                        if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (cqlParser.T__77 - 78)) | (1 << (cqlParser.T__78 - 78)) | (1 << (cqlParser.T__79 - 78)) | (1 << (cqlParser.T__80 - 78)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 729
                        self.expression(2)
                        pass

                    elif la_ == 9:
                        localctx = cqlParser.BooleanExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 731
                        self.match(cqlParser.T__56)
                        self.state = 733
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==cqlParser.T__57:
                            self.state = 732
                            self.match(cqlParser.T__57)


                        self.state = 735
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 10:
                        localctx = cqlParser.TypeExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 736
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 737
                        _la = self._input.LA(1)
                        if not(_la==cqlParser.T__56 or _la==cqlParser.T__61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 738
                        self.typeSpecifier()
                        pass

                    elif la_ == 11:
                        localctx = cqlParser.BetweenExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 739
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==cqlParser.T__64:
                            self.state = 740
                            self.match(cqlParser.T__64)


                        self.state = 743
                        self.match(cqlParser.T__65)
                        self.state = 744
                        self.expressionTerm(0)
                        self.state = 745
                        self.match(cqlParser.T__66)
                        self.state = 746
                        self.expressionTerm(0)
                        pass

             
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DateTimePrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_dateTimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimePrecision" ):
                listener.enterDateTimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimePrecision" ):
                listener.exitDateTimePrecision(self)




    def dateTimePrecision(self):

        localctx = cqlParser.DateTimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_dateTimePrecision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            _la = self._input.LA(1)
            if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (cqlParser.T__81 - 82)) | (1 << (cqlParser.T__82 - 82)) | (1 << (cqlParser.T__83 - 82)) | (1 << (cqlParser.T__84 - 82)) | (1 << (cqlParser.T__85 - 82)) | (1 << (cqlParser.T__86 - 82)) | (1 << (cqlParser.T__87 - 82)) | (1 << (cqlParser.T__88 - 82)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_dateTimeComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeComponent" ):
                listener.enterDateTimeComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeComponent" ):
                listener.exitDateTimeComponent(self)




    def dateTimeComponent(self):

        localctx = cqlParser.DateTimeComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_dateTimeComponent)
        try:
            self.state = 759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.dateTimePrecision()
                pass
            elif token in [cqlParser.T__89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.match(cqlParser.T__89)
                pass
            elif token in [cqlParser.T__90]:
                self.enterOuterAlt(localctx, 3)
                self.state = 757
                self.match(cqlParser.T__90)
                pass
            elif token in [cqlParser.T__91]:
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.match(cqlParser.T__91)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PluralDateTimePrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_pluralDateTimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluralDateTimePrecision" ):
                listener.enterPluralDateTimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluralDateTimePrecision" ):
                listener.exitPluralDateTimePrecision(self)




    def pluralDateTimePrecision(self):

        localctx = cqlParser.PluralDateTimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_pluralDateTimePrecision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (cqlParser.T__92 - 93)) | (1 << (cqlParser.T__93 - 93)) | (1 << (cqlParser.T__94 - 93)) | (1 << (cqlParser.T__95 - 93)) | (1 << (cqlParser.T__96 - 93)) | (1 << (cqlParser.T__97 - 93)) | (1 << (cqlParser.T__98 - 93)) | (1 << (cqlParser.T__99 - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_expressionTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AdditionExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditionExpressionTerm" ):
                listener.enterAdditionExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditionExpressionTerm" ):
                listener.exitAdditionExpressionTerm(self)


    class IndexedExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedExpressionTerm" ):
                listener.enterIndexedExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedExpressionTerm" ):
                listener.exitIndexedExpressionTerm(self)


    class WidthExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthExpressionTerm" ):
                listener.enterWidthExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthExpressionTerm" ):
                listener.exitWidthExpressionTerm(self)


    class SetAggregateExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAggregateExpressionTerm" ):
                listener.enterSetAggregateExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAggregateExpressionTerm" ):
                listener.exitSetAggregateExpressionTerm(self)


    class TimeUnitExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimeComponent(self):
            return self.getTypedRuleContext(cqlParser.DateTimeComponentContext,0)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeUnitExpressionTerm" ):
                listener.enterTimeUnitExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeUnitExpressionTerm" ):
                listener.exitTimeUnitExpressionTerm(self)


    class IfThenElseExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseExpressionTerm" ):
                listener.enterIfThenElseExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseExpressionTerm" ):
                listener.exitIfThenElseExpressionTerm(self)


    class TimeBoundaryExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeBoundaryExpressionTerm" ):
                listener.enterTimeBoundaryExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeBoundaryExpressionTerm" ):
                listener.exitTimeBoundaryExpressionTerm(self)


    class ElementExtractorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementExtractorExpressionTerm" ):
                listener.enterElementExtractorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementExtractorExpressionTerm" ):
                listener.exitElementExtractorExpressionTerm(self)


    class ConversionExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)

        def unit(self):
            return self.getTypedRuleContext(cqlParser.UnitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionExpressionTerm" ):
                listener.enterConversionExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionExpressionTerm" ):
                listener.exitConversionExpressionTerm(self)


    class TypeExtentExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExtentExpressionTerm" ):
                listener.enterTypeExtentExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExtentExpressionTerm" ):
                listener.exitTypeExtentExpressionTerm(self)


    class PredecessorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredecessorExpressionTerm" ):
                listener.enterPredecessorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredecessorExpressionTerm" ):
                listener.exitPredecessorExpressionTerm(self)


    class PointExtractorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointExtractorExpressionTerm" ):
                listener.enterPointExtractorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointExtractorExpressionTerm" ):
                listener.exitPointExtractorExpressionTerm(self)


    class MultiplicationExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicationExpressionTerm" ):
                listener.enterMultiplicationExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicationExpressionTerm" ):
                listener.exitMultiplicationExpressionTerm(self)


    class AggregateExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateExpressionTerm" ):
                listener.enterAggregateExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateExpressionTerm" ):
                listener.exitAggregateExpressionTerm(self)


    class DurationExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationExpressionTerm" ):
                listener.enterDurationExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationExpressionTerm" ):
                listener.exitDurationExpressionTerm(self)


    class DifferenceExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDifferenceExpressionTerm" ):
                listener.enterDifferenceExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDifferenceExpressionTerm" ):
                listener.exitDifferenceExpressionTerm(self)


    class CaseExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def caseExpressionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CaseExpressionItemContext)
            else:
                return self.getTypedRuleContext(cqlParser.CaseExpressionItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionTerm" ):
                listener.enterCaseExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionTerm" ):
                listener.exitCaseExpressionTerm(self)


    class PowerExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpressionTerm" ):
                listener.enterPowerExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpressionTerm" ):
                listener.exitPowerExpressionTerm(self)


    class SuccessorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuccessorExpressionTerm" ):
                listener.enterSuccessorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuccessorExpressionTerm" ):
                listener.exitSuccessorExpressionTerm(self)


    class PolarityExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolarityExpressionTerm" ):
                listener.enterPolarityExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolarityExpressionTerm" ):
                listener.exitPolarityExpressionTerm(self)


    class TermExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def term(self):
            return self.getTypedRuleContext(cqlParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermExpressionTerm" ):
                listener.enterTermExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermExpressionTerm" ):
                listener.exitTermExpressionTerm(self)


    class InvocationExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)

        def qualifiedInvocation(self):
            return self.getTypedRuleContext(cqlParser.QualifiedInvocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationExpressionTerm" ):
                listener.enterInvocationExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationExpressionTerm" ):
                listener.exitInvocationExpressionTerm(self)



    def expressionTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cqlParser.ExpressionTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_expressionTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = cqlParser.TermExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 764
                self.term()
                pass

            elif la_ == 2:
                localctx = cqlParser.ConversionExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 765
                self.match(cqlParser.T__100)
                self.state = 766
                self.expression(0)
                self.state = 767
                self.match(cqlParser.T__101)
                self.state = 770
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__20, cqlParser.T__23, cqlParser.T__24, cqlParser.T__25, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__44, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__117, cqlParser.T__118, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152, cqlParser.T__153, cqlParser.T__154, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                    self.state = 768
                    self.typeSpecifier()
                    pass
                elif token in [cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.T__97, cqlParser.T__98, cqlParser.T__99, cqlParser.STRING]:
                    self.state = 769
                    self.unit()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = cqlParser.PolarityExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 772
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__102 or _la==cqlParser.T__103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 773
                self.expressionTerm(18)
                pass

            elif la_ == 4:
                localctx = cqlParser.TimeBoundaryExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 774
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__104 or _la==cqlParser.T__105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 775
                self.match(cqlParser.T__106)
                self.state = 776
                self.expressionTerm(17)
                pass

            elif la_ == 5:
                localctx = cqlParser.TimeUnitExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 777
                self.dateTimeComponent()
                self.state = 778
                self.match(cqlParser.T__18)
                self.state = 779
                self.expressionTerm(16)
                pass

            elif la_ == 6:
                localctx = cqlParser.DurationExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 781
                self.match(cqlParser.T__67)
                self.state = 782
                self.match(cqlParser.T__40)
                self.state = 783
                self.pluralDateTimePrecision()
                self.state = 784
                self.match(cqlParser.T__106)
                self.state = 785
                self.expressionTerm(15)
                pass

            elif la_ == 7:
                localctx = cqlParser.DifferenceExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 787
                self.match(cqlParser.T__68)
                self.state = 788
                self.match(cqlParser.T__40)
                self.state = 789
                self.pluralDateTimePrecision()
                self.state = 790
                self.match(cqlParser.T__106)
                self.state = 791
                self.expressionTerm(14)
                pass

            elif la_ == 8:
                localctx = cqlParser.WidthExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 793
                self.match(cqlParser.T__107)
                self.state = 794
                self.match(cqlParser.T__106)
                self.state = 795
                self.expressionTerm(13)
                pass

            elif la_ == 9:
                localctx = cqlParser.SuccessorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 796
                self.match(cqlParser.T__108)
                self.state = 797
                self.match(cqlParser.T__106)
                self.state = 798
                self.expressionTerm(12)
                pass

            elif la_ == 10:
                localctx = cqlParser.PredecessorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 799
                self.match(cqlParser.T__109)
                self.state = 800
                self.match(cqlParser.T__106)
                self.state = 801
                self.expressionTerm(11)
                pass

            elif la_ == 11:
                localctx = cqlParser.ElementExtractorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 802
                self.match(cqlParser.T__110)
                self.state = 803
                self.match(cqlParser.T__18)
                self.state = 804
                self.expressionTerm(10)
                pass

            elif la_ == 12:
                localctx = cqlParser.PointExtractorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 805
                self.match(cqlParser.T__111)
                self.state = 806
                self.match(cqlParser.T__18)
                self.state = 807
                self.expressionTerm(9)
                pass

            elif la_ == 13:
                localctx = cqlParser.TypeExtentExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 808
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__112 or _la==cqlParser.T__113):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 809
                self.namedTypeSpecifier()
                pass

            elif la_ == 14:
                localctx = cqlParser.IfThenElseExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 810
                self.match(cqlParser.T__120)
                self.state = 811
                self.expression(0)
                self.state = 812
                self.match(cqlParser.T__121)
                self.state = 813
                self.expression(0)
                self.state = 814
                self.match(cqlParser.T__122)
                self.state = 815
                self.expression(0)
                pass

            elif la_ == 15:
                localctx = cqlParser.CaseExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 817
                self.match(cqlParser.T__123)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__30) | (1 << cqlParser.T__37) | (1 << cqlParser.T__44) | (1 << cqlParser.T__47) | (1 << cqlParser.T__49) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (cqlParser.T__129 - 130)) | (1 << (cqlParser.T__130 - 130)) | (1 << (cqlParser.T__131 - 130)) | (1 << (cqlParser.T__132 - 130)) | (1 << (cqlParser.T__139 - 130)) | (1 << (cqlParser.T__140 - 130)) | (1 << (cqlParser.T__143 - 130)) | (1 << (cqlParser.T__147 - 130)) | (1 << (cqlParser.T__148 - 130)) | (1 << (cqlParser.T__149 - 130)) | (1 << (cqlParser.T__150 - 130)) | (1 << (cqlParser.T__151 - 130)) | (1 << (cqlParser.T__152 - 130)) | (1 << (cqlParser.T__153 - 130)) | (1 << (cqlParser.T__154 - 130)) | (1 << (cqlParser.T__155 - 130)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 130)) | (1 << (cqlParser.DATETIME - 130)) | (1 << (cqlParser.LONGNUMBER - 130)) | (1 << (cqlParser.DATE - 130)) | (1 << (cqlParser.TIME - 130)) | (1 << (cqlParser.IDENTIFIER - 130)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 130)) | (1 << (cqlParser.STRING - 130)) | (1 << (cqlParser.NUMBER - 130)))) != 0):
                    self.state = 818
                    self.expression(0)


                self.state = 822 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 821
                    self.caseExpressionItem()
                    self.state = 824 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==cqlParser.T__128):
                        break

                self.state = 826
                self.match(cqlParser.T__122)
                self.state = 827
                self.expression(0)
                self.state = 828
                self.match(cqlParser.T__105)
                pass

            elif la_ == 16:
                localctx = cqlParser.AggregateExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 830
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__47 or _la==cqlParser.T__124):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 831
                self.expression(0)
                pass

            elif la_ == 17:
                localctx = cqlParser.SetAggregateExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 832
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__125 or _la==cqlParser.T__126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 833
                self.expression(0)
                self.state = 839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 834
                    self.match(cqlParser.T__127)
                    self.state = 837
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 835
                        self.dateTimePrecision()
                        pass

                    elif la_ == 2:
                        self.state = 836
                        self.expression(0)
                        pass




                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 860
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        localctx = cqlParser.PowerExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 843
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 844
                        self.match(cqlParser.T__114)
                        self.state = 845
                        self.expressionTerm(8)
                        pass

                    elif la_ == 2:
                        localctx = cqlParser.MultiplicationExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 846
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 847
                        _la = self._input.LA(1)
                        if not(((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (cqlParser.T__115 - 116)) | (1 << (cqlParser.T__116 - 116)) | (1 << (cqlParser.T__117 - 116)) | (1 << (cqlParser.T__118 - 116)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 848
                        self.expressionTerm(7)
                        pass

                    elif la_ == 3:
                        localctx = cqlParser.AdditionExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 849
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 850
                        _la = self._input.LA(1)
                        if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (cqlParser.T__102 - 103)) | (1 << (cqlParser.T__103 - 103)) | (1 << (cqlParser.T__119 - 103)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 851
                        self.expressionTerm(6)
                        pass

                    elif la_ == 4:
                        localctx = cqlParser.InvocationExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 852
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 853
                        self.match(cqlParser.T__16)
                        self.state = 854
                        self.qualifiedInvocation()
                        pass

                    elif la_ == 5:
                        localctx = cqlParser.IndexedExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 855
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 856
                        self.match(cqlParser.T__37)
                        self.state = 857
                        self.expression(0)
                        self.state = 858
                        self.match(cqlParser.T__39)
                        pass

             
                self.state = 864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaseExpressionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_caseExpressionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionItem" ):
                listener.enterCaseExpressionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionItem" ):
                listener.exitCaseExpressionItem(self)




    def caseExpressionItem(self):

        localctx = cqlParser.CaseExpressionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_caseExpressionItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(cqlParser.T__128)
            self.state = 866
            self.expression(0)
            self.state = 867
            self.match(cqlParser.T__121)
            self.state = 868
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimePrecisionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_dateTimePrecisionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimePrecisionSpecifier" ):
                listener.enterDateTimePrecisionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimePrecisionSpecifier" ):
                listener.exitDateTimePrecisionSpecifier(self)




    def dateTimePrecisionSpecifier(self):

        localctx = cqlParser.DateTimePrecisionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dateTimePrecisionSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.dateTimePrecision()
            self.state = 871
            self.match(cqlParser.T__106)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelativeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_relativeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelativeQualifier" ):
                listener.enterRelativeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelativeQualifier" ):
                listener.exitRelativeQualifier(self)




    def relativeQualifier(self):

        localctx = cqlParser.RelativeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_relativeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__129 or _la==cqlParser.T__130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetRelativeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_offsetRelativeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetRelativeQualifier" ):
                listener.enterOffsetRelativeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetRelativeQualifier" ):
                listener.exitOffsetRelativeQualifier(self)




    def offsetRelativeQualifier(self):

        localctx = cqlParser.OffsetRelativeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_offsetRelativeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__131 or _la==cqlParser.T__132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveRelativeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_exclusiveRelativeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveRelativeQualifier" ):
                listener.enterExclusiveRelativeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveRelativeQualifier" ):
                listener.exitExclusiveRelativeQualifier(self)




    def exclusiveRelativeQualifier(self):

        localctx = cqlParser.ExclusiveRelativeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_exclusiveRelativeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__133 or _la==cqlParser.T__134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantityOffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def offsetRelativeQualifier(self):
            return self.getTypedRuleContext(cqlParser.OffsetRelativeQualifierContext,0)


        def exclusiveRelativeQualifier(self):
            return self.getTypedRuleContext(cqlParser.ExclusiveRelativeQualifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_quantityOffset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantityOffset" ):
                listener.enterQuantityOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantityOffset" ):
                listener.exitQuantityOffset(self)




    def quantityOffset(self):

        localctx = cqlParser.QuantityOffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_quantityOffset)
        self._la = 0 # Token type
        try:
            self.state = 886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.quantity()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__131 or _la==cqlParser.T__132:
                    self.state = 880
                    self.offsetRelativeQualifier()


                pass
            elif token in [cqlParser.T__133, cqlParser.T__134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.exclusiveRelativeQualifier()
                self.state = 884
                self.quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalRelationshipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_temporalRelationship

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalRelationship" ):
                listener.enterTemporalRelationship(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalRelationship" ):
                listener.exitTemporalRelationship(self)




    def temporalRelationship(self):

        localctx = cqlParser.TemporalRelationshipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_temporalRelationship)
        self._la = 0 # Token type
        try:
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__135:
                    self.state = 888
                    self.match(cqlParser.T__135)


                self.state = 891
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__136 or _la==cqlParser.T__137):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__136 or _la==cqlParser.T__137):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__138:
                    self.state = 893
                    self.match(cqlParser.T__138)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalOperatorPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_intervalOperatorPhrase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithinIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithinIntervalOperatorPhrase" ):
                listener.enterWithinIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithinIntervalOperatorPhrase" ):
                listener.exitWithinIntervalOperatorPhrase(self)


    class IncludedInIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludedInIntervalOperatorPhrase" ):
                listener.enterIncludedInIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludedInIntervalOperatorPhrase" ):
                listener.exitIncludedInIntervalOperatorPhrase(self)


    class EndsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndsIntervalOperatorPhrase" ):
                listener.enterEndsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndsIntervalOperatorPhrase" ):
                listener.exitEndsIntervalOperatorPhrase(self)


    class ConcurrentWithIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relativeQualifier(self):
            return self.getTypedRuleContext(cqlParser.RelativeQualifierContext,0)

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcurrentWithIntervalOperatorPhrase" ):
                listener.enterConcurrentWithIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcurrentWithIntervalOperatorPhrase" ):
                listener.exitConcurrentWithIntervalOperatorPhrase(self)


    class OverlapsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlapsIntervalOperatorPhrase" ):
                listener.enterOverlapsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlapsIntervalOperatorPhrase" ):
                listener.exitOverlapsIntervalOperatorPhrase(self)


    class IncludesIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludesIntervalOperatorPhrase" ):
                listener.enterIncludesIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludesIntervalOperatorPhrase" ):
                listener.exitIncludesIntervalOperatorPhrase(self)


    class BeforeOrAfterIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def temporalRelationship(self):
            return self.getTypedRuleContext(cqlParser.TemporalRelationshipContext,0)

        def quantityOffset(self):
            return self.getTypedRuleContext(cqlParser.QuantityOffsetContext,0)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforeOrAfterIntervalOperatorPhrase" ):
                listener.enterBeforeOrAfterIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforeOrAfterIntervalOperatorPhrase" ):
                listener.exitBeforeOrAfterIntervalOperatorPhrase(self)


    class MeetsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeetsIntervalOperatorPhrase" ):
                listener.enterMeetsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeetsIntervalOperatorPhrase" ):
                listener.exitMeetsIntervalOperatorPhrase(self)


    class StartsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartsIntervalOperatorPhrase" ):
                listener.enterStartsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartsIntervalOperatorPhrase" ):
                listener.exitStartsIntervalOperatorPhrase(self)



    def intervalOperatorPhrase(self):

        localctx = cqlParser.IntervalOperatorPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_intervalOperatorPhrase)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                localctx = cqlParser.ConcurrentWithIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0):
                    self.state = 898
                    _la = self._input.LA(1)
                    if not(((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 901
                self.match(cqlParser.T__142)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (cqlParser.T__81 - 82)) | (1 << (cqlParser.T__82 - 82)) | (1 << (cqlParser.T__83 - 82)) | (1 << (cqlParser.T__84 - 82)) | (1 << (cqlParser.T__85 - 82)) | (1 << (cqlParser.T__86 - 82)) | (1 << (cqlParser.T__87 - 82)) | (1 << (cqlParser.T__88 - 82)))) != 0):
                    self.state = 902
                    self.dateTimePrecision()


                self.state = 907
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cqlParser.T__129, cqlParser.T__130]:
                    self.state = 905
                    self.relativeQualifier()
                    pass
                elif token in [cqlParser.T__61]:
                    self.state = 906
                    self.match(cqlParser.T__61)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 909
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__104 or _la==cqlParser.T__105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = cqlParser.IncludesIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__64:
                    self.state = 912
                    self.match(cqlParser.T__64)


                self.state = 915
                self.match(cqlParser.T__143)
                self.state = 917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 916
                    self.dateTimePrecisionSpecifier()


                self.state = 920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 919
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__104 or _la==cqlParser.T__105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                localctx = cqlParser.IncludedInIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0):
                    self.state = 922
                    _la = self._input.LA(1)
                    if not(((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__64:
                    self.state = 925
                    self.match(cqlParser.T__64)


                self.state = 928
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__144 or _la==cqlParser.T__145):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 929
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 4:
                localctx = cqlParser.BeforeOrAfterIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0):
                    self.state = 932
                    _la = self._input.LA(1)
                    if not(((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (cqlParser.T__133 - 134)) | (1 << (cqlParser.T__134 - 134)) | (1 << (cqlParser.NUMBER - 134)))) != 0):
                    self.state = 935
                    self.quantityOffset()


                self.state = 938
                self.temporalRelationship()
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.dateTimePrecisionSpecifier()


                self.state = 943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 942
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__104 or _la==cqlParser.T__105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                localctx = cqlParser.WithinIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0):
                    self.state = 945
                    _la = self._input.LA(1)
                    if not(((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__141 - 140)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__64:
                    self.state = 948
                    self.match(cqlParser.T__64)


                self.state = 951
                self.match(cqlParser.T__146)
                self.state = 952
                self.quantity()
                self.state = 953
                self.match(cqlParser.T__106)
                self.state = 955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 954
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__104 or _la==cqlParser.T__105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = cqlParser.MeetsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 957
                self.match(cqlParser.T__147)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__136 or _la==cqlParser.T__137:
                    self.state = 958
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__136 or _la==cqlParser.T__137):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 961
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 7:
                localctx = cqlParser.OverlapsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 964
                self.match(cqlParser.T__148)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__136 or _la==cqlParser.T__137:
                    self.state = 965
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__136 or _la==cqlParser.T__137):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 969
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 968
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 8:
                localctx = cqlParser.StartsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 971
                self.match(cqlParser.T__139)
                self.state = 973
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 972
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 9:
                localctx = cqlParser.EndsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 975
                self.match(cqlParser.T__140)
                self.state = 977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 976
                    self.dateTimePrecisionSpecifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_term

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalConstantTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def externalConstant(self):
            return self.getTypedRuleContext(cqlParser.ExternalConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalConstantTerm" ):
                listener.enterExternalConstantTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalConstantTerm" ):
                listener.exitExternalConstantTerm(self)


    class TupleSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tupleSelector(self):
            return self.getTypedRuleContext(cqlParser.TupleSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleSelectorTerm" ):
                listener.enterTupleSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleSelectorTerm" ):
                listener.exitTupleSelectorTerm(self)


    class LiteralTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(cqlParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralTerm" ):
                listener.enterLiteralTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralTerm" ):
                listener.exitLiteralTerm(self)


    class ConceptSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conceptSelector(self):
            return self.getTypedRuleContext(cqlParser.ConceptSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConceptSelectorTerm" ):
                listener.enterConceptSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConceptSelectorTerm" ):
                listener.exitConceptSelectorTerm(self)


    class ParenthesizedTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedTerm" ):
                listener.enterParenthesizedTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedTerm" ):
                listener.exitParenthesizedTerm(self)


    class CodeSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def codeSelector(self):
            return self.getTypedRuleContext(cqlParser.CodeSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSelectorTerm" ):
                listener.enterCodeSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSelectorTerm" ):
                listener.exitCodeSelectorTerm(self)


    class InvocationTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def invocation(self):
            return self.getTypedRuleContext(cqlParser.InvocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationTerm" ):
                listener.enterInvocationTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationTerm" ):
                listener.exitInvocationTerm(self)


    class InstanceSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def instanceSelector(self):
            return self.getTypedRuleContext(cqlParser.InstanceSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceSelectorTerm" ):
                listener.enterInstanceSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceSelectorTerm" ):
                listener.exitInstanceSelectorTerm(self)


    class IntervalSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def intervalSelector(self):
            return self.getTypedRuleContext(cqlParser.IntervalSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSelectorTerm" ):
                listener.enterIntervalSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSelectorTerm" ):
                listener.exitIntervalSelectorTerm(self)


    class ListSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def listSelector(self):
            return self.getTypedRuleContext(cqlParser.ListSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListSelectorTerm" ):
                listener.enterListSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListSelectorTerm" ):
                listener.exitListSelectorTerm(self)



    def term(self):

        localctx = cqlParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_term)
        try:
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = cqlParser.InvocationTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.invocation()
                pass

            elif la_ == 2:
                localctx = cqlParser.LiteralTermContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.literal()
                pass

            elif la_ == 3:
                localctx = cqlParser.ExternalConstantTermContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.externalConstant()
                pass

            elif la_ == 4:
                localctx = cqlParser.IntervalSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 984
                self.intervalSelector()
                pass

            elif la_ == 5:
                localctx = cqlParser.TupleSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 985
                self.tupleSelector()
                pass

            elif la_ == 6:
                localctx = cqlParser.InstanceSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 986
                self.instanceSelector()
                pass

            elif la_ == 7:
                localctx = cqlParser.ListSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 987
                self.listSelector()
                pass

            elif la_ == 8:
                localctx = cqlParser.CodeSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 988
                self.codeSelector()
                pass

            elif la_ == 9:
                localctx = cqlParser.ConceptSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 989
                self.conceptSelector()
                pass

            elif la_ == 10:
                localctx = cqlParser.ParenthesizedTermContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 990
                self.match(cqlParser.T__30)
                self.state = 991
                self.expression(0)
                self.state = 992
                self.match(cqlParser.T__31)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedInvocation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedFunctionInvocationContext(QualifiedInvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.QualifiedInvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedFunction(self):
            return self.getTypedRuleContext(cqlParser.QualifiedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionInvocation" ):
                listener.enterQualifiedFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionInvocation" ):
                listener.exitQualifiedFunctionInvocation(self)


    class QualifiedMemberInvocationContext(QualifiedInvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.QualifiedInvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedMemberInvocation" ):
                listener.enterQualifiedMemberInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedMemberInvocation" ):
                listener.exitQualifiedMemberInvocation(self)



    def qualifiedInvocation(self):

        localctx = cqlParser.QualifiedInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_qualifiedInvocation)
        try:
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                localctx = cqlParser.QualifiedMemberInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.referentialIdentifier()
                pass

            elif la_ == 2:
                localctx = cqlParser.QualifiedFunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.qualifiedFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrFunctionIdentifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierOrFunctionIdentifierContext,0)


        def paramList(self):
            return self.getTypedRuleContext(cqlParser.ParamListContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunction" ):
                listener.enterQualifiedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunction" ):
                listener.exitQualifiedFunction(self)




    def qualifiedFunction(self):

        localctx = cqlParser.QualifiedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_qualifiedFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.identifierOrFunctionIdentifier()
            self.state = 1001
            self.match(cqlParser.T__30)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__30) | (1 << cqlParser.T__37) | (1 << cqlParser.T__44) | (1 << cqlParser.T__47) | (1 << cqlParser.T__49) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (cqlParser.T__129 - 130)) | (1 << (cqlParser.T__130 - 130)) | (1 << (cqlParser.T__131 - 130)) | (1 << (cqlParser.T__132 - 130)) | (1 << (cqlParser.T__139 - 130)) | (1 << (cqlParser.T__140 - 130)) | (1 << (cqlParser.T__143 - 130)) | (1 << (cqlParser.T__147 - 130)) | (1 << (cqlParser.T__148 - 130)) | (1 << (cqlParser.T__149 - 130)) | (1 << (cqlParser.T__150 - 130)) | (1 << (cqlParser.T__151 - 130)) | (1 << (cqlParser.T__152 - 130)) | (1 << (cqlParser.T__153 - 130)) | (1 << (cqlParser.T__154 - 130)) | (1 << (cqlParser.T__155 - 130)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 130)) | (1 << (cqlParser.DATETIME - 130)) | (1 << (cqlParser.LONGNUMBER - 130)) | (1 << (cqlParser.DATE - 130)) | (1 << (cqlParser.TIME - 130)) | (1 << (cqlParser.IDENTIFIER - 130)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 130)) | (1 << (cqlParser.STRING - 130)) | (1 << (cqlParser.NUMBER - 130)))) != 0):
                self.state = 1002
                self.paramList()


            self.state = 1005
            self.match(cqlParser.T__31)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_invocation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TotalInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTotalInvocation" ):
                listener.enterTotalInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTotalInvocation" ):
                listener.exitTotalInvocation(self)


    class ThisInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisInvocation" ):
                listener.enterThisInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisInvocation" ):
                listener.exitThisInvocation(self)


    class IndexInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexInvocation" ):
                listener.enterIndexInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexInvocation" ):
                listener.exitIndexInvocation(self)


    class FunctionInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function(self):
            return self.getTypedRuleContext(cqlParser.FunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class MemberInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberInvocation" ):
                listener.enterMemberInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberInvocation" ):
                listener.exitMemberInvocation(self)



    def invocation(self):

        localctx = cqlParser.InvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_invocation)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                localctx = cqlParser.MemberInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.referentialIdentifier()
                pass

            elif la_ == 2:
                localctx = cqlParser.FunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.function()
                pass

            elif la_ == 3:
                localctx = cqlParser.ThisInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1009
                self.match(cqlParser.T__149)
                pass

            elif la_ == 4:
                localctx = cqlParser.IndexInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1010
                self.match(cqlParser.T__150)
                pass

            elif la_ == 5:
                localctx = cqlParser.TotalInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1011
                self.match(cqlParser.T__151)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def paramList(self):
            return self.getTypedRuleContext(cqlParser.ParamListContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = cqlParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.referentialIdentifier()
            self.state = 1015
            self.match(cqlParser.T__30)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__30) | (1 << cqlParser.T__37) | (1 << cqlParser.T__44) | (1 << cqlParser.T__47) | (1 << cqlParser.T__49) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (cqlParser.T__129 - 130)) | (1 << (cqlParser.T__130 - 130)) | (1 << (cqlParser.T__131 - 130)) | (1 << (cqlParser.T__132 - 130)) | (1 << (cqlParser.T__139 - 130)) | (1 << (cqlParser.T__140 - 130)) | (1 << (cqlParser.T__143 - 130)) | (1 << (cqlParser.T__147 - 130)) | (1 << (cqlParser.T__148 - 130)) | (1 << (cqlParser.T__149 - 130)) | (1 << (cqlParser.T__150 - 130)) | (1 << (cqlParser.T__151 - 130)) | (1 << (cqlParser.T__152 - 130)) | (1 << (cqlParser.T__153 - 130)) | (1 << (cqlParser.T__154 - 130)) | (1 << (cqlParser.T__155 - 130)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 130)) | (1 << (cqlParser.DATETIME - 130)) | (1 << (cqlParser.LONGNUMBER - 130)) | (1 << (cqlParser.DATE - 130)) | (1 << (cqlParser.TIME - 130)) | (1 << (cqlParser.IDENTIFIER - 130)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 130)) | (1 << (cqlParser.STRING - 130)) | (1 << (cqlParser.NUMBER - 130)))) != 0):
                self.state = 1016
                self.paramList()


            self.state = 1019
            self.match(cqlParser.T__31)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QuantityContext)
            else:
                return self.getTypedRuleContext(cqlParser.QuantityContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_ratio

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatio" ):
                listener.enterRatio(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatio" ):
                listener.exitRatio(self)




    def ratio(self):

        localctx = cqlParser.RatioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_ratio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.quantity()
            self.state = 1022
            self.match(cqlParser.T__10)
            self.state = 1023
            self.quantity()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(cqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)


    class NullLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class RatioLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ratio(self):
            return self.getTypedRuleContext(cqlParser.RatioContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatioLiteral" ):
                listener.enterRatioLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatioLiteral" ):
                listener.exitRatioLiteral(self)


    class DateTimeLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME(self):
            return self.getToken(cqlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteral" ):
                listener.enterDateTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteral" ):
                listener.exitDateTimeLiteral(self)


    class StringLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class DateLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(cqlParser.DATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)


    class BooleanLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)


    class NumberLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(cqlParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)


    class LongNumberLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LONGNUMBER(self):
            return self.getToken(cqlParser.LONGNUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongNumberLiteral" ):
                listener.enterLongNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongNumberLiteral" ):
                listener.exitLongNumberLiteral(self)


    class QuantityLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantityLiteral" ):
                listener.enterQuantityLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantityLiteral" ):
                listener.exitQuantityLiteral(self)



    def literal(self):

        localctx = cqlParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = cqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__59 or _la==cqlParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = cqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.match(cqlParser.T__58)
                pass

            elif la_ == 3:
                localctx = cqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1027
                self.match(cqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = cqlParser.NumberLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1028
                self.match(cqlParser.NUMBER)
                pass

            elif la_ == 5:
                localctx = cqlParser.LongNumberLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1029
                self.match(cqlParser.LONGNUMBER)
                pass

            elif la_ == 6:
                localctx = cqlParser.DateTimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1030
                self.match(cqlParser.DATETIME)
                pass

            elif la_ == 7:
                localctx = cqlParser.DateLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1031
                self.match(cqlParser.DATE)
                pass

            elif la_ == 8:
                localctx = cqlParser.TimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1032
                self.match(cqlParser.TIME)
                pass

            elif la_ == 9:
                localctx = cqlParser.QuantityLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1033
                self.quantity()
                pass

            elif la_ == 10:
                localctx = cqlParser.RatioLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1034
                self.ratio()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_intervalSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSelector" ):
                listener.enterIntervalSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSelector" ):
                listener.exitIntervalSelector(self)




    def intervalSelector(self):

        localctx = cqlParser.IntervalSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_intervalSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(cqlParser.T__23)
            self.state = 1038
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__30 or _la==cqlParser.T__37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1039
            self.expression(0)
            self.state = 1040
            self.match(cqlParser.T__14)
            self.state = 1041
            self.expression(0)
            self.state = 1042
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__31 or _la==cqlParser.T__39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleElementSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.TupleElementSelectorContext)
            else:
                return self.getTypedRuleContext(cqlParser.TupleElementSelectorContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleSelector" ):
                listener.enterTupleSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleSelector" ):
                listener.exitTupleSelector(self)




    def tupleSelector(self):

        localctx = cqlParser.TupleSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tupleSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__24:
                self.state = 1044
                self.match(cqlParser.T__24)


            self.state = 1047
            self.match(cqlParser.T__13)
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__10]:
                self.state = 1048
                self.match(cqlParser.T__10)
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__44, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__117, cqlParser.T__118, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.state = 1049
                self.tupleElementSelector()
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 1050
                    self.match(cqlParser.T__14)
                    self.state = 1051
                    self.tupleElementSelector()
                    self.state = 1056
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1059
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleElementSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleElementSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleElementSelector" ):
                listener.enterTupleElementSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleElementSelector" ):
                listener.exitTupleElementSelector(self)




    def tupleElementSelector(self):

        localctx = cqlParser.TupleElementSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_tupleElementSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.referentialIdentifier()
            self.state = 1062
            self.match(cqlParser.T__10)
            self.state = 1063
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def instanceElementSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.InstanceElementSelectorContext)
            else:
                return self.getTypedRuleContext(cqlParser.InstanceElementSelectorContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_instanceSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceSelector" ):
                listener.enterInstanceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceSelector" ):
                listener.exitInstanceSelector(self)




    def instanceSelector(self):

        localctx = cqlParser.InstanceSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_instanceSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.namedTypeSpecifier()
            self.state = 1066
            self.match(cqlParser.T__13)
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__10]:
                self.state = 1067
                self.match(cqlParser.T__10)
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__44, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__117, cqlParser.T__118, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.state = 1068
                self.instanceElementSelector()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 1069
                    self.match(cqlParser.T__14)
                    self.state = 1070
                    self.instanceElementSelector()
                    self.state = 1075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1078
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceElementSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_instanceElementSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceElementSelector" ):
                listener.enterInstanceElementSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceElementSelector" ):
                listener.exitInstanceElementSelector(self)




    def instanceElementSelector(self):

        localctx = cqlParser.InstanceElementSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_instanceElementSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.referentialIdentifier()
            self.state = 1081
            self.match(cqlParser.T__10)
            self.state = 1082
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_listSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListSelector" ):
                listener.enterListSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListSelector" ):
                listener.exitListSelector(self)




    def listSelector(self):

        localctx = cqlParser.ListSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_listSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__20:
                self.state = 1084
                self.match(cqlParser.T__20)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__21:
                    self.state = 1085
                    self.match(cqlParser.T__21)
                    self.state = 1086
                    self.typeSpecifier()
                    self.state = 1087
                    self.match(cqlParser.T__22)




            self.state = 1093
            self.match(cqlParser.T__13)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__30) | (1 << cqlParser.T__37) | (1 << cqlParser.T__44) | (1 << cqlParser.T__47) | (1 << cqlParser.T__49) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (cqlParser.T__129 - 130)) | (1 << (cqlParser.T__130 - 130)) | (1 << (cqlParser.T__131 - 130)) | (1 << (cqlParser.T__132 - 130)) | (1 << (cqlParser.T__139 - 130)) | (1 << (cqlParser.T__140 - 130)) | (1 << (cqlParser.T__143 - 130)) | (1 << (cqlParser.T__147 - 130)) | (1 << (cqlParser.T__148 - 130)) | (1 << (cqlParser.T__149 - 130)) | (1 << (cqlParser.T__150 - 130)) | (1 << (cqlParser.T__151 - 130)) | (1 << (cqlParser.T__152 - 130)) | (1 << (cqlParser.T__153 - 130)) | (1 << (cqlParser.T__154 - 130)) | (1 << (cqlParser.T__155 - 130)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 130)) | (1 << (cqlParser.DATETIME - 130)) | (1 << (cqlParser.LONGNUMBER - 130)) | (1 << (cqlParser.DATE - 130)) | (1 << (cqlParser.TIME - 130)) | (1 << (cqlParser.IDENTIFIER - 130)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 130)) | (1 << (cqlParser.STRING - 130)) | (1 << (cqlParser.NUMBER - 130)))) != 0):
                self.state = 1094
                self.expression(0)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 1095
                    self.match(cqlParser.T__14)
                    self.state = 1096
                    self.expression(0)
                    self.state = 1101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1104
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_displayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayClause" ):
                listener.enterDisplayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayClause" ):
                listener.exitDisplayClause(self)




    def displayClause(self):

        localctx = cqlParser.DisplayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_displayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(cqlParser.T__152)
            self.state = 1107
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def codesystemIdentifier(self):
            return self.getTypedRuleContext(cqlParser.CodesystemIdentifierContext,0)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codeSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSelector" ):
                listener.enterCodeSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSelector" ):
                listener.exitCodeSelector(self)




    def codeSelector(self):

        localctx = cqlParser.CodeSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_codeSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(cqlParser.T__153)
            self.state = 1110
            self.match(cqlParser.STRING)
            self.state = 1111
            self.match(cqlParser.T__18)
            self.state = 1112
            self.codesystemIdentifier()
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1113
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConceptSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodeSelectorContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodeSelectorContext,i)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_conceptSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConceptSelector" ):
                listener.enterConceptSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConceptSelector" ):
                listener.exitConceptSelector(self)




    def conceptSelector(self):

        localctx = cqlParser.ConceptSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_conceptSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(cqlParser.T__154)
            self.state = 1117
            self.match(cqlParser.T__13)
            self.state = 1118
            self.codeSelector()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 1119
                self.match(cqlParser.T__14)
                self.state = 1120
                self.codeSelector()
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1126
            self.match(cqlParser.T__15)
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1127
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = cqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__34) | (1 << cqlParser.T__35) | (1 << cqlParser.T__36) | (1 << cqlParser.T__40) | (1 << cqlParser.T__43) | (1 << cqlParser.T__44) | (1 << cqlParser.T__45) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__56) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__61) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__64 - 64)) | (1 << (cqlParser.T__65 - 64)) | (1 << (cqlParser.T__66 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__74 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__130 - 128)) | (1 << (cqlParser.T__131 - 128)) | (1 << (cqlParser.T__132 - 128)) | (1 << (cqlParser.T__135 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__138 - 128)) | (1 << (cqlParser.T__139 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__141 - 128)) | (1 << (cqlParser.T__142 - 128)) | (1 << (cqlParser.T__143 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__147 - 128)) | (1 << (cqlParser.T__148 - 128)) | (1 << (cqlParser.T__152 - 128)) | (1 << (cqlParser.T__153 - 128)) | (1 << (cqlParser.T__154 - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)




    def reservedWord(self):

        localctx = cqlParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_reservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__18) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__34) | (1 << cqlParser.T__35) | (1 << cqlParser.T__36) | (1 << cqlParser.T__40) | (1 << cqlParser.T__43) | (1 << cqlParser.T__45) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__50) | (1 << cqlParser.T__56) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__61) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__64 - 64)) | (1 << (cqlParser.T__65 - 64)) | (1 << (cqlParser.T__66 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__74 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__135 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__138 - 128)) | (1 << (cqlParser.T__141 - 128)) | (1 << (cqlParser.T__142 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__153 - 128)) | (1 << (cqlParser.T__154 - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_keywordIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordIdentifier" ):
                listener.enterKeywordIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordIdentifier" ):
                listener.exitKeywordIdentifier(self)




    def keywordIdentifier(self):

        localctx = cqlParser.KeywordIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_keywordIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__44) | (1 << cqlParser.T__49) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (cqlParser.T__73 - 74)) | (1 << (cqlParser.T__75 - 74)) | (1 << (cqlParser.T__76 - 74)) | (1 << (cqlParser.T__78 - 74)) | (1 << (cqlParser.T__79 - 74)) | (1 << (cqlParser.T__80 - 74)) | (1 << (cqlParser.T__89 - 74)) | (1 << (cqlParser.T__90 - 74)) | (1 << (cqlParser.T__91 - 74)) | (1 << (cqlParser.T__104 - 74)) | (1 << (cqlParser.T__105 - 74)) | (1 << (cqlParser.T__107 - 74)) | (1 << (cqlParser.T__108 - 74)) | (1 << (cqlParser.T__109 - 74)) | (1 << (cqlParser.T__117 - 74)) | (1 << (cqlParser.T__118 - 74)) | (1 << (cqlParser.T__129 - 74)) | (1 << (cqlParser.T__130 - 74)) | (1 << (cqlParser.T__131 - 74)) | (1 << (cqlParser.T__132 - 74)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (cqlParser.T__139 - 140)) | (1 << (cqlParser.T__140 - 140)) | (1 << (cqlParser.T__143 - 140)) | (1 << (cqlParser.T__147 - 140)) | (1 << (cqlParser.T__148 - 140)) | (1 << (cqlParser.T__152 - 140)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObsoleteIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_obsoleteIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObsoleteIdentifier" ):
                listener.enterObsoleteIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObsoleteIdentifier" ):
                listener.exitObsoleteIdentifier(self)




    def obsoleteIdentifier(self):

        localctx = cqlParser.ObsoleteIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_obsoleteIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__44) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__57))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (cqlParser.T__152 - 153)) | (1 << (cqlParser.T__153 - 153)) | (1 << (cqlParser.T__154 - 153)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = cqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_functionIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__34) | (1 << cqlParser.T__35) | (1 << cqlParser.T__36) | (1 << cqlParser.T__40) | (1 << cqlParser.T__43) | (1 << cqlParser.T__44) | (1 << cqlParser.T__45) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__56) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__61) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__64 - 64)) | (1 << (cqlParser.T__65 - 64)) | (1 << (cqlParser.T__66 - 64)) | (1 << (cqlParser.T__67 - 64)) | (1 << (cqlParser.T__68 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__74 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__111 - 64)) | (1 << (cqlParser.T__112 - 64)) | (1 << (cqlParser.T__113 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__130 - 128)) | (1 << (cqlParser.T__131 - 128)) | (1 << (cqlParser.T__132 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__139 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__141 - 128)) | (1 << (cqlParser.T__142 - 128)) | (1 << (cqlParser.T__143 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__147 - 128)) | (1 << (cqlParser.T__148 - 128)) | (1 << (cqlParser.T__152 - 128)) | (1 << (cqlParser.T__153 - 128)) | (1 << (cqlParser.T__154 - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_typeNameIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameIdentifier" ):
                listener.enterTypeNameIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameIdentifier" ):
                listener.exitTypeNameIdentifier(self)




    def typeNameIdentifier(self):

        localctx = cqlParser.TypeNameIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeNameIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__89 or _la==cqlParser.T__90 or _la==cqlParser.T__153 or _la==cqlParser.T__154):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferentialIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def keywordIdentifier(self):
            return self.getTypedRuleContext(cqlParser.KeywordIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_referentialIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferentialIdentifier" ):
                listener.enterReferentialIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferentialIdentifier" ):
                listener.exitReferentialIdentifier(self)




    def referentialIdentifier(self):

        localctx = cqlParser.ReferentialIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_referentialIdentifier)
        try:
            self.state = 1144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.identifier()
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__44, cqlParser.T__49, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__104, cqlParser.T__105, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__117, cqlParser.T__118, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__139, cqlParser.T__140, cqlParser.T__143, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1143
                self.keywordIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferentialOrTypeNameIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def typeNameIdentifier(self):
            return self.getTypedRuleContext(cqlParser.TypeNameIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_referentialOrTypeNameIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferentialOrTypeNameIdentifier" ):
                listener.enterReferentialOrTypeNameIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferentialOrTypeNameIdentifier" ):
                listener.exitReferentialOrTypeNameIdentifier(self)




    def referentialOrTypeNameIdentifier(self):

        localctx = cqlParser.ReferentialOrTypeNameIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_referentialOrTypeNameIdentifier)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.referentialIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.typeNameIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def functionIdentifier(self):
            return self.getTypedRuleContext(cqlParser.FunctionIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_identifierOrFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrFunctionIdentifier" ):
                listener.enterIdentifierOrFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrFunctionIdentifier" ):
                listener.exitIdentifierOrFunctionIdentifier(self)




    def identifierOrFunctionIdentifier(self):

        localctx = cqlParser.IdentifierOrFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_identifierOrFunctionIdentifier)
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self.identifier()
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__18, cqlParser.T__19, cqlParser.T__20, cqlParser.T__23, cqlParser.T__24, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__34, cqlParser.T__35, cqlParser.T__36, cqlParser.T__40, cqlParser.T__43, cqlParser.T__44, cqlParser.T__45, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__56, cqlParser.T__57, cqlParser.T__58, cqlParser.T__59, cqlParser.T__60, cqlParser.T__61, cqlParser.T__62, cqlParser.T__63, cqlParser.T__64, cqlParser.T__65, cqlParser.T__66, cqlParser.T__67, cqlParser.T__68, cqlParser.T__73, cqlParser.T__74, cqlParser.T__75, cqlParser.T__76, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.T__97, cqlParser.T__98, cqlParser.T__99, cqlParser.T__100, cqlParser.T__101, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__110, cqlParser.T__111, cqlParser.T__112, cqlParser.T__113, cqlParser.T__117, cqlParser.T__118, cqlParser.T__120, cqlParser.T__121, cqlParser.T__122, cqlParser.T__123, cqlParser.T__124, cqlParser.T__125, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__130, cqlParser.T__131, cqlParser.T__132, cqlParser.T__136, cqlParser.T__137, cqlParser.T__139, cqlParser.T__140, cqlParser.T__141, cqlParser.T__142, cqlParser.T__143, cqlParser.T__144, cqlParser.T__145, cqlParser.T__146, cqlParser.T__147, cqlParser.T__148, cqlParser.T__152, cqlParser.T__153, cqlParser.T__154]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.functionIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(cqlParser.IDENTIFIER, 0)

        def DELIMITEDIDENTIFIER(self):
            return self.getToken(cqlParser.DELIMITEDIDENTIFIER, 0)

        def QUOTEDIDENTIFIER(self):
            return self.getToken(cqlParser.QUOTEDIDENTIFIER, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = cqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (cqlParser.QUOTEDIDENTIFIER - 157)) | (1 << (cqlParser.IDENTIFIER - 157)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 157)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_externalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalConstant" ):
                listener.enterExternalConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalConstant" ):
                listener.exitExternalConstant(self)




    def externalConstant(self):

        localctx = cqlParser.ExternalConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_externalConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(cqlParser.T__155)
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.state = 1157
                self.identifier()
                pass
            elif token in [cqlParser.STRING]:
                self.state = 1158
                self.match(cqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = cqlParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.expression(0)
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 1162
                self.match(cqlParser.T__14)
                self.state = 1163
                self.expression(0)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(cqlParser.NUMBER, 0)

        def unit(self):
            return self.getTypedRuleContext(cqlParser.UnitContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_quantity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantity" ):
                listener.enterQuantity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantity" ):
                listener.exitQuantity(self)




    def quantity(self):

        localctx = cqlParser.QuantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_quantity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(cqlParser.NUMBER)
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1170
                self.unit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)


        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit" ):
                listener.enterUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit" ):
                listener.exitUnit(self)




    def unit(self):

        localctx = cqlParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_unit)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.dateTimePrecision()
                pass
            elif token in [cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.T__97, cqlParser.T__98, cqlParser.T__99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.pluralDateTimePrecision()
                pass
            elif token in [cqlParser.STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1175
                self.match(cqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.simplePath_sempred
        self._predicates[62] = self.expression_sempred
        self._predicates[66] = self.expressionTerm_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def simplePath_sempred(self, localctx:SimplePathContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 11)
         

    def expressionTerm_sempred(self, localctx:ExpressionTermContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 20)
         




